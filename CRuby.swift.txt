/*
 This is a grab of the CRuby swift interface - useful to see, and
 SourceKit manages to create it on the fly only about 40% of the time...
 */

/**********************************************************************

  ruby.h -

  $Author$
  created at: Sun 10 12:06:15 Jun JST 2007

  Copyright (C) 2007-2008 Yukihiro Matsumoto

**********************************************************************/

public var HAVE_RUBY_DEFINES_H: Int32 { get }
public var HAVE_RUBY_ENCODING_H: Int32 { get }
public var HAVE_RUBY_INTERN_H: Int32 { get }
public var HAVE_RUBY_IO_H: Int32 { get }
public var HAVE_RUBY_MISSING_H: Int32 { get }
public var HAVE_RUBY_ONIGURUMA_H: Int32 { get }
public var HAVE_RUBY_RE_H: Int32 { get }
public var HAVE_RUBY_REGEX_H: Int32 { get }
public var HAVE_RUBY_RUBY_H: Int32 { get }
public var HAVE_RUBY_ST_H: Int32 { get }
public var HAVE_RUBY_THREAD_H: Int32 { get }
public var HAVE_RUBY_UTIL_H: Int32 { get }
public var HAVE_RUBY_VERSION_H: Int32 { get }
public var HAVE_RUBY_VM_H: Int32 { get }
/* confdefs.h */
public var CANONICALIZATION_FOR_MATHN: Int32 { get }
public var STDC_HEADERS: Int32 { get }
public var HAVE_SYS_TYPES_H: Int32 { get }
public var HAVE_SYS_STAT_H: Int32 { get }
public var HAVE_STDLIB_H: Int32 { get }
public var HAVE_STRING_H: Int32 { get }
public var HAVE_MEMORY_H: Int32 { get }
public var HAVE_STRINGS_H: Int32 { get }
public var HAVE_INTTYPES_H: Int32 { get }
public var HAVE_STDINT_H: Int32 { get }
public var HAVE_UNISTD_H: Int32 { get }
public var __EXTENSIONS__: Int32 { get }
public var _ALL_SOURCE: Int32 { get }
public var _GNU_SOURCE: Int32 { get }
public var _POSIX_PTHREAD_SEMANTICS: Int32 { get }
public var _TANDEM_SOURCE: Int32 { get }
public var HAVE_INFINITY: Int32 { get }
public var HAVE_NAN: Int32 { get }
public var HAVE_CRT_EXTERNS_H: Int32 { get }
public var HAVE_LIBDL: Int32 { get }
public var HAVE_DIRENT_H: Int32 { get }
public var HAVE__BOOL: Int32 { get }
public var HAVE_STDBOOL_H: Int32 { get }
public var HAVE_SYS_WAIT_H: Int32 { get }
public var HAVE_GRP_H: Int32 { get }
public var HAVE_FCNTL_H: Int32 { get }
public var HAVE_FLOAT_H: Int32 { get }
public var HAVE_LANGINFO_H: Int32 { get }
public var HAVE_LIMITS_H: Int32 { get }
public var HAVE_LOCALE_H: Int32 { get }
public var HAVE_MALLOC_MALLOC_H: Int32 { get }
public var HAVE_PWD_H: Int32 { get }
public var HAVE_SYS_ATTR_H: Int32 { get }
public var HAVE_SYS_FCNTL_H: Int32 { get }
public var HAVE_SYS_FILE_H: Int32 { get }
public var HAVE_SYS_IOCTL_H: Int32 { get }
public var HAVE_SYS_PARAM_H: Int32 { get }
public var HAVE_SYS_RESOURCE_H: Int32 { get }
public var HAVE_SYS_SELECT_H: Int32 { get }
public var HAVE_SYS_SOCKET_H: Int32 { get }
public var HAVE_SYS_SYSCALL_H: Int32 { get }
public var HAVE_SYS_TIME_H: Int32 { get }
public var HAVE_SYS_TIMES_H: Int32 { get }
public var HAVE_SYS_UIO_H: Int32 { get }
public var HAVE_TIME_H: Int32 { get }
public var HAVE_UCONTEXT_H: Int32 { get }
public var HAVE_UTIME_H: Int32 { get }
public var AC_APPLE_UNIVERSAL_BUILD: Int32 { get }
public var HAVE_TYPEOF: Int32 { get }
public var HAVE_LONG_LONG: Int32 { get }
public var HAVE_OFF_T: Int32 { get }
public var SIZEOF_INT: Int32 { get }
public var SIZEOF_SHORT: Int32 { get }

public var SIZEOF_LONG: Int32 { get }

public var SIZEOF_LONG_LONG: Int32 { get }
public var SIZEOF___INT64: Int32 { get }
public var SIZEOF_OFF_T: Int32 { get }
public var SIZEOF_VOIDP: Int32 { get }
public var SIZEOF_FLOAT: Int32 { get }
public var SIZEOF_DOUBLE: Int32 { get }
public var SIZEOF_TIME_T: Int32 { get }
public var SIZEOF_CLOCK_T: Int32 { get }

public var PRI_LL_PREFIX: String { get }

public var SIGNEDNESS_OF_PID_T: Int32 { get }

public var PRI_PIDT_PREFIX: String { get }

public var SIGNEDNESS_OF_UID_T: Int32 { get }

public var PRI_UIDT_PREFIX: String { get }

public var SIGNEDNESS_OF_GID_T: Int32 { get }

public var PRI_GIDT_PREFIX: String { get }

public var SIGNEDNESS_OF_TIME_T: Int32 { get }

public var PRI_TIMET_PREFIX: String { get }

public var SIGNEDNESS_OF_DEV_T: Int32 { get }

public var PRI_DEVT_PREFIX: String { get }

public var SIGNEDNESS_OF_MODE_T: Int32 { get }

public var PRI_MODET_PREFIX: String { get }

public var SIGNEDNESS_OF_RLIM_T: Int32 { get }

public var PRI_RLIM_PREFIX: String { get }

public var SIGNEDNESS_OF_OFF_T: Int32 { get }

public var PRI_OFFT_PREFIX: String { get }

public var SIGNEDNESS_OF_CLOCKID_T: Int32 { get }

public var PRI_CLOCKID_PREFIX: String { get }
public var HAVE_PROTOTYPES: Int32 { get }

public var HAVE_STDARG_PROTOTYPES: Int32 { get }
public var HAVE_VA_ARGS_MACRO: Int32 { get }

public var HAVE_FUNC_WEAK: Int32 { get }

/* only if defined __i386__ */
/* defined __i386__ */

/* only if defined __i386__ */
/* defined __i386__ */

/* only if defined __i386__ */
/* defined __i386__ */

public var ENUM_OVER_INT: Int32 { get }
public var HAVE_DECL_SYS_NERR: Int32 { get }
public var HAVE_DECL_GETENV: Int32 { get }
public var SIZEOF_SIZE_T: Int32 { get }
public var SIZEOF_PTRDIFF_T: Int32 { get }
public var PRI_SIZE_PREFIX: String { get }
public var PRI_PTRDIFF_PREFIX: String { get }
public var HAVE_STRUCT_STAT_ST_BLKSIZE: Int32 { get }
public var HAVE_ST_BLKSIZE: Int32 { get }
public var HAVE_STRUCT_STAT_ST_BLOCKS: Int32 { get }
public var HAVE_ST_BLOCKS: Int32 { get }
public var HAVE_STRUCT_STAT_ST_RDEV: Int32 { get }
public var HAVE_ST_RDEV: Int32 { get }
public var SIZEOF_STRUCT_STAT_ST_SIZE: Int32 { get }
public var SIZEOF_STRUCT_STAT_ST_BLOCKS: Int32 { get }
public var SIZEOF_STRUCT_STAT_ST_INO: Int32 { get }
public var HAVE_STRUCT_STAT_ST_ATIMESPEC: Int32 { get }
public var HAVE_STRUCT_STAT_ST_MTIMESPEC: Int32 { get }
public var HAVE_STRUCT_STAT_ST_CTIMESPEC: Int32 { get }
public var HAVE_STRUCT_STAT_ST_BIRTHTIMESPEC: Int32 { get }
public var HAVE_STRUCT_TIMEVAL: Int32 { get }
public var SIZEOF_STRUCT_TIMEVAL_TV_SEC: Int32 { get }
public var HAVE_STRUCT_TIMESPEC: Int32 { get }
public var HAVE_STRUCT_TIMEZONE: Int32 { get }
public var HAVE_RB_FD_INIT: Int32 { get }
public var HAVE_INT8_T: Int32 { get }
public var SIZEOF_INT8_T: Int32 { get }
public var HAVE_UINT8_T: Int32 { get }
public var SIZEOF_UINT8_T: Int32 { get }
public var HAVE_INT16_T: Int32 { get }
public var SIZEOF_INT16_T: Int32 { get }
public var HAVE_UINT16_T: Int32 { get }
public var SIZEOF_UINT16_T: Int32 { get }
public var HAVE_INT32_T: Int32 { get }
public var SIZEOF_INT32_T: Int32 { get }
public var HAVE_UINT32_T: Int32 { get }
public var SIZEOF_UINT32_T: Int32 { get }
public var HAVE_INT64_T: Int32 { get }
public var SIZEOF_INT64_T: Int32 { get }
public var HAVE_UINT64_T: Int32 { get }
public var SIZEOF_UINT64_T: Int32 { get }
public var HAVE_INTPTR_T: Int32 { get }
public var SIZEOF_INTPTR_T: Int32 { get }
public var HAVE_UINTPTR_T: Int32 { get }
public var SIZEOF_UINTPTR_T: Int32 { get }
public var HAVE_SSIZE_T: Int32 { get }
public var SIZEOF_SSIZE_T: Int32 { get }

public var HAVE_ALLOCA_H: Int32 { get }
public var HAVE_ALLOCA: Int32 { get }
public var HAVE_ACOSH: Int32 { get }
public var HAVE_CBRT: Int32 { get }
public var HAVE_CRYPT: Int32 { get }
public var HAVE_DUP2: Int32 { get }
public var HAVE_ERF: Int32 { get }
public var HAVE_FFS: Int32 { get }
public var HAVE_FINITE: Int32 { get }
public var HAVE_FLOCK: Int32 { get }
public var HAVE_HYPOT: Int32 { get }
public var HAVE_ISINF: Int32 { get }
public var HAVE_ISNAN: Int32 { get }
public var HAVE_LGAMMA_R: Int32 { get }
public var HAVE_MEMMOVE: Int32 { get }
public var HAVE_NEXTAFTER: Int32 { get }
public var HAVE_STRCHR: Int32 { get }
public var HAVE_STRERROR: Int32 { get }
public var HAVE_STRLCAT: Int32 { get }
public var HAVE_STRLCPY: Int32 { get }
public var HAVE_STRSTR: Int32 { get }
public var HAVE_TGAMMA: Int32 { get }

public var HAVE_SIGNBIT: Int32 { get }
public var HAVE_FORK: Int32 { get }

public var HAVE_WORKING_FORK: Int32 { get }
public var HAVE___SYSCALL: Int32 { get }
public var HAVE__LONGJMP: Int32 { get }
public var HAVE_ATAN2L: Int32 { get }
public var HAVE_ATAN2F: Int32 { get }
public var HAVE_CHROOT: Int32 { get }
public var HAVE_CLOCK_GETTIME: Int32 { get }
public var HAVE_COSH: Int32 { get }
public var HAVE_DIRFD: Int32 { get }
public var HAVE_DLOPEN: Int32 { get }
public var HAVE_DLADDR: Int32 { get }
public var HAVE_DUP: Int32 { get }
public var HAVE_ENDGRENT: Int32 { get }
public var HAVE_FCHMOD: Int32 { get }
public var HAVE_FCHOWN: Int32 { get }
public var HAVE_FCNTL: Int32 { get }
public var HAVE_FGETATTRLIST: Int32 { get }
public var HAVE_FMOD: Int32 { get }
public var HAVE_FSYNC: Int32 { get }
public var HAVE_FTRUNCATE: Int32 { get }
public var HAVE_GETATTRLIST: Int32 { get }
public var HAVE_GETCWD: Int32 { get }
public var HAVE_GETGRNAM: Int32 { get }
public var HAVE_GETGRNAM_R: Int32 { get }
public var HAVE_GETGROUPS: Int32 { get }
public var HAVE_GETPGID: Int32 { get }
public var HAVE_GETPGRP: Int32 { get }
public var HAVE_GETPRIORITY: Int32 { get }
public var HAVE_GETPWNAM_R: Int32 { get }
public var HAVE_GETRLIMIT: Int32 { get }
public var HAVE_GETSID: Int32 { get }
public var HAVE_GETTIMEOFDAY: Int32 { get }
public var HAVE_GMTIME_R: Int32 { get }
public var HAVE_INITGROUPS: Int32 { get }
public var HAVE_IOCTL: Int32 { get }
public var HAVE_ISSETUGID: Int32 { get }
public var HAVE_KILLPG: Int32 { get }
public var HAVE_LCHMOD: Int32 { get }
public var HAVE_LCHOWN: Int32 { get }
public var HAVE_LINK: Int32 { get }
public var HAVE_LLABS: Int32 { get }
public var HAVE_LOCKF: Int32 { get }
public var HAVE_LOG2: Int32 { get }
public var HAVE_LSTAT: Int32 { get }
public var HAVE_MALLOC_SIZE: Int32 { get }
public var HAVE_MBLEN: Int32 { get }
public var HAVE_MEMSET_S: Int32 { get }
public var HAVE_WRITEV: Int32 { get }
public var HAVE_MKFIFO: Int32 { get }
public var HAVE_MKNOD: Int32 { get }
public var HAVE_MKTIME: Int32 { get }
public var HAVE_POLL: Int32 { get }
public var HAVE_POSIX_MEMALIGN: Int32 { get }
public var HAVE_PREAD: Int32 { get }
public var HAVE_QSORT_R: Int32 { get }
public var HAVE_READLINK: Int32 { get }
public var HAVE_ROUND: Int32 { get }
public var HAVE_SEEKDIR: Int32 { get }
public var HAVE_SENDFILE: Int32 { get }
public var HAVE_SETEGID: Int32 { get }
public var HAVE_SETENV: Int32 { get }
public var HAVE_SETEUID: Int32 { get }
public var HAVE_SETGID: Int32 { get }
public var HAVE_SETGROUPS: Int32 { get }
public var HAVE_SETPGID: Int32 { get }
public var HAVE_SETPGRP: Int32 { get }
public var HAVE_SETREGID: Int32 { get }
public var HAVE_SETREUID: Int32 { get }
public var HAVE_SETRGID: Int32 { get }
public var HAVE_SETRLIMIT: Int32 { get }
public var HAVE_SETRUID: Int32 { get }
public var HAVE_SETSID: Int32 { get }
public var HAVE_SETUID: Int32 { get }
public var HAVE_SHUTDOWN: Int32 { get }
public var HAVE_SIGACTION: Int32 { get }
public var HAVE_SIGALTSTACK: Int32 { get }
public var HAVE_SIGPROCMASK: Int32 { get }
public var HAVE_SINH: Int32 { get }
public var HAVE_SYMLINK: Int32 { get }
public var HAVE_SYSCALL: Int32 { get }
public var HAVE_SYSCONF: Int32 { get }
public var HAVE_TANH: Int32 { get }
public var HAVE_TELLDIR: Int32 { get }
public var HAVE_TIMEGM: Int32 { get }
public var HAVE_TIMES: Int32 { get }
public var HAVE_TRUNCATE: Int32 { get }
public var HAVE_UNSETENV: Int32 { get }
public var HAVE_UTIMES: Int32 { get }
public var HAVE_WAIT4: Int32 { get }
public var HAVE_WAITPID: Int32 { get }

public var __STDC_WANT_LIB_EXT1__: Int32 { get }
/* !defined __STDC_WANT_LIB_EXT1__ */
public var HAVE_BUILTIN___BUILTIN_BSWAP16: Int32 { get }
public var HAVE_BUILTIN___BUILTIN_BSWAP32: Int32 { get }
public var HAVE_BUILTIN___BUILTIN_BSWAP64: Int32 { get }
public var HAVE_BUILTIN___BUILTIN_CLZ: Int32 { get }
public var HAVE_BUILTIN___BUILTIN_CLZL: Int32 { get }
public var HAVE_BUILTIN___BUILTIN_CLZLL: Int32 { get }
public var HAVE_BUILTIN___BUILTIN_CHOOSE_EXPR: Int32 { get }
public var HAVE_BUILTIN___BUILTIN_CHOOSE_EXPR_CONSTANT_P: Int32 { get }
public var HAVE_BUILTIN___BUILTIN_TYPES_COMPATIBLE_P: Int32 { get }
public var HAVE_BSD_QSORT_R: Int32 { get }
public var ATAN2_INF_C99: Int32 { get }
public var LGAMMA_R_M0_FIX: Int32 { get }
public var HAVE_CLOCK_GETRES: Int32 { get }
public var HAVE_STRUCT_TM_TM_ZONE: Int32 { get }
public var HAVE_TM_ZONE: Int32 { get }
public var HAVE_STRUCT_TM_TM_GMTOFF: Int32 { get }
public var HAVE_DAYLIGHT: Int32 { get }
public var HAVE_VAR_TIMEZONE: Int32 { get }

public var HAVE_TIMEZONE: Int32 { get }
public var TIMEZONE_VOID: Int32 { get }
public var NEGATIVE_TIME_T: Int32 { get }
public var POSIX_SIGNAL: Int32 { get }

public var HAVE__SC_CLK_TCK: Int32 { get }
public var STACK_GROW_DIRECTION: Int32 { get }
public var _REENTRANT: Int32 { get }
public var _THREAD_SAFE: Int32 { get }
public var HAVE_LIBPTHREAD: Int32 { get }
public var HAVE_SCHED_YIELD: Int32 { get }
public var HAVE_PTHREAD_ATTR_SETINHERITSCHED: Int32 { get }
public var HAVE_PTHREAD_ATTR_GETSTACK: Int32 { get }
public var HAVE_PTHREAD_GET_STACKADDR_NP: Int32 { get }
public var HAVE_PTHREAD_GET_STACKSIZE_NP: Int32 { get }
public var HAVE_PTHREAD_COND_INIT: Int32 { get }
public var HAVE_PTHREAD_CONDATTR_INIT: Int32 { get }
public var HAVE_PTHREAD_SIGMASK: Int32 { get }
public var HAVE_PTHREAD_SETNAME_NP: Int32 { get }
public var HAVE_PTHREAD_ATTR_INIT: Int32 { get }

public var HAVE_EXECINFO_H: Int32 { get }
public var HAVE_LIBUNWIND_H: Int32 { get }
public var HAVE_BACKTRACE: Int32 { get }
public var BROKEN_BACKTRACE: Int32 { get }
public var DLEXT_MAXLEN: Int32 { get }
public var DLEXT: String { get }
public var LIBDIR_BASENAME: String { get }

public var HAVE_PTHREAD_H: Int32 { get }

public var RUBY_PLATFORM_CPU: String { get }
/* defined __x86_64__ */

/* defined __i386__ */
public var RUBY_PLATFORM_OS: String { get }
/************************************************

  missing.h - prototype for *.c in ./missing, and
  	      for missing timeval struct

  $Author: nagachika $
  created at: Sat May 11 23:46:03 JST 2002

************************************************/

/* satisfy cc-mode */

/* for INFINITY and NAN */

/* begin */
/* end */

/* seconds */
/* microseconds */

/* HAVE_STRUCT_TIMEVAL */

/* seconds */
/* nanoseconds */

public func eaccess(_: UnsafePointer<Int8>!, _: Int32) -> Int32

public func explicit_bzero(_ b: UnsafeMutableRawPointer!, _ len: Int)
/************************************************

  defines.h -

  $Author: nobu $
  created at: Wed May 18 00:21:44 JST 1994

************************************************/

/* satisfy cc-mode */

/* AC_INCLUDES_DEFAULT */

/* begin */
/* end */

public func ruby_xmalloc(_: Int) -> UnsafeMutableRawPointer!
public func ruby_xmalloc2(_: Int, _: Int) -> UnsafeMutableRawPointer!
public func ruby_xcalloc(_: Int, _: Int) -> UnsafeMutableRawPointer!
public func ruby_xrealloc(_: UnsafeMutableRawPointer!, _: Int) -> UnsafeMutableRawPointer!
public func ruby_xrealloc2(_: UnsafeMutableRawPointer!, _: Int, _: Int) -> UnsafeMutableRawPointer!
public func ruby_xfree(_: UnsafeMutableRawPointer!)

public var HAVE_TRUE_LONG_LONG: Int32 { get }

/*
  DOSISH mean MS-Windows style filesystem.
  But you should use more precise macros like DOSISH_DRIVE_LETTER, PATH_SEP,
  ENV_IGNORECASE or CASEFOLD_FILESYSTEM.
 */

/* deprecated */

public var RUBY_MBCHAR_MAXSIZE: Int32 { get }
/* MB_CUR_MAX will not work well in C locale */

public var PATH_SEP: String { get }

public var PATH_ENV: String { get }

public var CASEFOLD_FILESYSTEM: Int32 { get }

public var UNALIGNED_WORD_ACCESS: Int32 { get }
/**********************************************************************

  ruby/ruby.h -

  $Author: naruse $
  created at: Thu Jun 10 14:26:32 JST 1993

  Copyright (C) 1993-2008 Yukihiro Matsumoto
  Copyright (C) 2000  Network Applied Communication Laboratory, Inc.
  Copyright (C) 2000  Information-technology Promotion Agency, Japan

**********************************************************************/

/* satisfy cc-mode */

/* __builtin_choose_expr and __builtin_types_compatible aren't available
 * on C++.  See https://gcc.gnu.org/onlinedocs/gcc/Other-Builtins.html */

public var NORETURN_STYLE_NEW: Int32 { get }

/* unreachable */

/* Make alloca work the best possible way.  */

/* atarist */

/* predefined by HP cc +Olibcalls */

/* AIX */
/* HAVE_ALLOCA_H */
/* __GNUC__ */

public typealias VALUE = UInt
public typealias ID = UInt

public var SIZEOF_VALUE: Int32 { get }
public var PRI_VALUE_PREFIX: String { get }

public typealias ruby_check_sizeof_int = (Int8)
public typealias ruby_check_sizeof_long = (Int8)

public typealias ruby_check_sizeof_long_long = (Int8)

public typealias ruby_check_sizeof_voidp = (Int8)

public var PRI_INT_PREFIX: String { get }

public var PRI_LONG_PREFIX: String { get }

public var PRI_64_PREFIX: String { get }

public var RUBY_PRI_VALUE_MARK: String { get }

/* assuming 32bit(2's complement) long */

/* assuming 64bit(2's complement) long long */

public func rb_int2inum(_: Int) -> VALUE

public func rb_uint2inum(_: VALUE) -> VALUE

public func rb_ll2inum(_: Int64) -> VALUE

public func rb_ull2inum(_: UInt64) -> VALUE

public func rb_out_of_int(_ num: Int) -> Never

public func rb_long2int_inline(_ n: Int) -> Int32

public func rb_fix2long(_ x: VALUE) -> Int

public func rb_fix2ulong(_ x: VALUE) -> UInt

public func rb_sym2id(_: VALUE) -> ID
public func rb_id2sym(_: ID) -> VALUE

public var USE_FLONUM: Int32 { get }

/* Module#methods, #singleton_methods and so on return Symbols */
public var USE_SYMBOL_AS_METHOD_NAME: Int32 { get }

/* special constants - i.e. non-zero and non-fixnum constants */
public struct ruby_special_consts : RawRepresentable, Equatable {

    public init(_ rawValue: UInt32)

    public init(rawValue: UInt32)

    public var rawValue: UInt32
}
public var RUBY_Qfalse: ruby_special_consts { get } /* ...0000 0000 */
public var RUBY_Qtrue: ruby_special_consts { get } /* ...0001 0100 */
public var RUBY_Qnil: ruby_special_consts { get } /* ...0000 1000 */
public var RUBY_Qundef: ruby_special_consts { get } /* ...0011 0100 */
public var RUBY_IMMEDIATE_MASK: ruby_special_consts { get }
public var RUBY_FIXNUM_FLAG: ruby_special_consts { get } /* ...xxxx xxx1 */
public var RUBY_FLONUM_MASK: ruby_special_consts { get }
public var RUBY_FLONUM_FLAG: ruby_special_consts { get } /* ...xxxx xx10 */
public var RUBY_SYMBOL_FLAG: ruby_special_consts { get } /* ...0000 1100 */

/* ...0000 0000 */
/* ...0000 0010 */
/* ...0000 0100 */
/* ...0000 0110 */

/* ...xxxx xxx1 */
/* any values ANDed with FLONUM_MASK cannot be FLONUM_FLAG */

/* ...0000 1110 */

public var RUBY_SPECIAL_SHIFT: ruby_special_consts { get }

/* undefined value for placeholder */

public struct ruby_value_type : RawRepresentable, Equatable {

    public init(_ rawValue: UInt32)

    public init(rawValue: UInt32)

    public var rawValue: UInt32
}
public var RUBY_T_NONE: ruby_value_type { get }
public var RUBY_T_OBJECT: ruby_value_type { get }
public var RUBY_T_CLASS: ruby_value_type { get }
public var RUBY_T_MODULE: ruby_value_type { get }
public var RUBY_T_FLOAT: ruby_value_type { get }
public var RUBY_T_STRING: ruby_value_type { get }
public var RUBY_T_REGEXP: ruby_value_type { get }
public var RUBY_T_ARRAY: ruby_value_type { get }
public var RUBY_T_HASH: ruby_value_type { get }
public var RUBY_T_STRUCT: ruby_value_type { get }
public var RUBY_T_BIGNUM: ruby_value_type { get }
public var RUBY_T_FILE: ruby_value_type { get }
public var RUBY_T_DATA: ruby_value_type { get }
public var RUBY_T_MATCH: ruby_value_type { get }
public var RUBY_T_COMPLEX: ruby_value_type { get }
public var RUBY_T_RATIONAL: ruby_value_type { get }
public var RUBY_T_NIL: ruby_value_type { get }
public var RUBY_T_TRUE: ruby_value_type { get }
public var RUBY_T_FALSE: ruby_value_type { get }
public var RUBY_T_SYMBOL: ruby_value_type { get }
public var RUBY_T_FIXNUM: ruby_value_type { get }
public var RUBY_T_UNDEF: ruby_value_type { get }
public var RUBY_T_IMEMO: ruby_value_type { get }
public var RUBY_T_NODE: ruby_value_type { get }
public var RUBY_T_ICLASS: ruby_value_type { get }
public var RUBY_T_ZOMBIE: ruby_value_type { get }
public var RUBY_T_MASK: ruby_value_type { get }

/* RB_GC_GUARD_PTR() is an intermediate macro, and has no effect by
 * itself.  don't use it directly */

public func rb_check_type(_: VALUE, _: Int32)

public func rb_str_to_str(_: VALUE) -> VALUE
public func rb_string_value(_: UnsafeMutablePointer<VALUE>!) -> VALUE
public func rb_string_value_ptr(_: UnsafeMutablePointer<VALUE>!) -> UnsafeMutablePointer<Int8>!
public func rb_string_value_cstr(_: UnsafeMutablePointer<VALUE>!) -> UnsafeMutablePointer<Int8>!

public func rb_check_safe_obj(_: VALUE)

public func rb_str_export(_: VALUE) -> VALUE

public func rb_str_export_locale(_: VALUE) -> VALUE

public func rb_get_path(_: VALUE) -> VALUE

public func rb_get_path_no_checksafe(_: VALUE) -> VALUE

public var RUBY_SAFE_LEVEL_MAX: Int32 { get }
public func rb_secure(_: Int32)
public func rb_safe_level() -> Int32
public func rb_set_safe_level(_: Int32)

/* in gcc 4.8 or earlier, __builtin_choose_expr() does not consider
 * __builtin_constant_p(variable) a constant expression.
 */

public func rb_set_safe_level_force(_: Int32)
public func rb_secure_update(_: VALUE)
public func rb_insecure_operation() -> Never

public func rb_errinfo() -> VALUE
public func rb_set_errinfo(_: VALUE)

public func rb_num2long(_: VALUE) -> Int
public func rb_num2ulong(_: VALUE) -> UInt
public func rb_num2long_inline(_ x: VALUE) -> Int

public func rb_num2ulong_inline(_ x: VALUE) -> UInt

public func rb_num2int(_: VALUE) -> Int
public func rb_fix2int(_: VALUE) -> Int

public func rb_num2int_inline(_ x: VALUE) -> Int32

public func rb_num2uint(_: VALUE) -> UInt

public func rb_fix2uint(_: VALUE) -> UInt

/* SIZEOF_INT < SIZEOF_LONG */

/* SIZEOF_INT < SIZEOF_LONG */

public func rb_num2short(_: VALUE) -> Int16
public func rb_num2ushort(_: VALUE) -> UInt16
public func rb_fix2short(_: VALUE) -> Int16
public func rb_fix2ushort(_: VALUE) -> UInt16

public func rb_num2short_inline(_ x: VALUE) -> Int16

public func rb_num2ll(_: VALUE) -> Int64
public func rb_num2ull(_: VALUE) -> UInt64
public func rb_num2ll_inline(_ x: VALUE) -> Int64

public func rb_num2dbl(_: VALUE) -> Double

public func rb_uint2big(_: VALUE) -> VALUE
public func rb_int2big(_: Int) -> VALUE

public func rb_newobj() -> VALUE
public func rb_newobj_of(_: VALUE, _: VALUE) -> VALUE
public func rb_obj_setup(_ obj: VALUE, _ klass: VALUE, _ type: VALUE) -> VALUE

/* core has special NEWOBJ_OF() in internal.h */
/* use NEWOBJ_OF instead of NEWOBJ()+OBJSETUP() */

public var USE_RGENGC: Int32 { get }

public var USE_RINCGC: Int32 { get }

public var RGENGC_WB_PROTECTED_ARRAY: Int32 { get }

public var RGENGC_WB_PROTECTED_HASH: Int32 { get }

public var RGENGC_WB_PROTECTED_STRUCT: Int32 { get }

public var RGENGC_WB_PROTECTED_STRING: Int32 { get }

public var RGENGC_WB_PROTECTED_OBJECT: Int32 { get }

public var RGENGC_WB_PROTECTED_REGEXP: Int32 { get }

public var RGENGC_WB_PROTECTED_CLASS: Int32 { get }

public var RGENGC_WB_PROTECTED_FLOAT: Int32 { get }

public var RGENGC_WB_PROTECTED_COMPLEX: Int32 { get }

public var RGENGC_WB_PROTECTED_RATIONAL: Int32 { get }

public var RGENGC_WB_PROTECTED_BIGNUM: Int32 { get }

public var RGENGC_WB_PROTECTED_NODE_CREF: Int32 { get }

public struct ruby_fl_type : RawRepresentable, Equatable {

    public init(_ rawValue: Int32)

    public init(rawValue: Int32)

    public var rawValue: Int32
}
public var RUBY_FL_WB_PROTECTED: ruby_fl_type { get }
public var RUBY_FL_PROMOTED0: ruby_fl_type { get }
public var RUBY_FL_PROMOTED1: ruby_fl_type { get }
public var RUBY_FL_PROMOTED: ruby_fl_type { get }
public var RUBY_FL_FINALIZE: ruby_fl_type { get }
public var RUBY_FL_TAINT: ruby_fl_type { get }
public var RUBY_FL_UNTRUSTED: ruby_fl_type { get }
public var RUBY_FL_EXIVAR: ruby_fl_type { get }
public var RUBY_FL_FREEZE: ruby_fl_type { get }
public var RUBY_FL_USHIFT: ruby_fl_type { get }
public var RUBY_FL_USER0: ruby_fl_type { get }
public var RUBY_FL_USER1: ruby_fl_type { get }
public var RUBY_FL_USER2: ruby_fl_type { get }
public var RUBY_FL_USER3: ruby_fl_type { get }
public var RUBY_FL_USER4: ruby_fl_type { get }
public var RUBY_FL_USER5: ruby_fl_type { get }
public var RUBY_FL_USER6: ruby_fl_type { get }
public var RUBY_FL_USER7: ruby_fl_type { get }
public var RUBY_FL_USER8: ruby_fl_type { get }
public var RUBY_FL_USER9: ruby_fl_type { get }
public var RUBY_FL_USER10: ruby_fl_type { get }
public var RUBY_FL_USER11: ruby_fl_type { get }
public var RUBY_FL_USER12: ruby_fl_type { get }
public var RUBY_FL_USER13: ruby_fl_type { get }
public var RUBY_FL_USER14: ruby_fl_type { get }
public var RUBY_FL_USER15: ruby_fl_type { get }
public var RUBY_FL_USER16: ruby_fl_type { get }
public var RUBY_FL_USER17: ruby_fl_type { get }
public var RUBY_FL_USER18: ruby_fl_type { get }
public var RUBY_FL_USER19: ruby_fl_type { get }
public var RUBY_ELTS_SHARED: ruby_fl_type { get }
public var RUBY_FL_DUPPED: ruby_fl_type { get }
public var RUBY_FL_SINGLETON: ruby_fl_type { get }

public struct RBasic {

    public var flags: VALUE

    public var klass: VALUE

    public init()

    public init(flags: VALUE, klass: VALUE)
}

public func rb_obj_hide(_ obj: VALUE) -> VALUE
public func rb_obj_reveal(_ obj: VALUE, _ klass: VALUE) -> VALUE /* do not use this API to change klass information */

public var ROBJECT_EMBED_LEN_MAX: Int { get }
public var ROBJECT_EMBED: Int { get }

public var ROBJECT_ENUM_END: Int { get }

public struct RObject {

    
    public struct __Unnamed_union_as {

        public struct __Unnamed_struct_heap {

            public var numiv: Int /* only uses 32-bits */

            public var ivptr: UnsafeMutablePointer<VALUE>!

            public var iv_index_tbl: UnsafeMutableRawPointer! /* shortcut for RCLASS_IV_INDEX_TBL(rb_obj_class(obj)) */

            public init()

            public init(numiv: Int, ivptr: UnsafeMutablePointer<VALUE>!, iv_index_tbl: UnsafeMutableRawPointer!)
        }

        public var heap: RObject.__Unnamed_union_as.__Unnamed_struct_heap

        public var ary: (VALUE, VALUE, VALUE)

        public init(heap: RObject.__Unnamed_union_as.__Unnamed_struct_heap)

        public init(ary: (VALUE, VALUE, VALUE))

        public init()
    }

    public var basic: RBasic

    public var `as`: RObject.__Unnamed_union_as

    public init()

    public init(basic: RBasic, as: RObject.__Unnamed_union_as)
}

@available(*, deprecated, message: "RClass is internal use only")
public struct RClassDeprecated {

    
    public var basic: RBasic

    public init()

    public init(basic: RBasic)
}

public var RMODULE_IS_OVERLAID: Int { get }
public var RMODULE_IS_REFINEMENT: Int { get }
public var RMODULE_INCLUDED_INTO_REFINEMENT: Int { get }

public var RMODULE_ENUM_END: Int { get }

public func rb_float_value(_: VALUE) -> Double
public func rb_float_new(_: Double) -> VALUE
public func rb_float_new_in_heap(_: Double) -> VALUE

public var RSTRING_NOEMBED: Int { get }
public var RSTRING_EMBED_LEN_MASK: Int { get }
public var RSTRING_EMBED_LEN_SHIFT: Int { get }
public var RSTRING_EMBED_LEN_MAX: Int { get }
public var RSTRING_FSTR: Int { get }

public var RSTRING_ENUM_END: Int { get }

public struct RString {

    
    public struct __Unnamed_union_as {

        public struct __Unnamed_struct_heap {

            
            public struct __Unnamed_union_aux {

                public var capa: Int

                public var shared: VALUE

                public init(capa: Int)

                public init(shared: VALUE)

                public init()
            }

            public var len: Int

            public var ptr: UnsafeMutablePointer<Int8>!

            public var aux: RString.__Unnamed_union_as.__Unnamed_struct_heap.__Unnamed_union_aux

            public init()

            public init(len: Int, ptr: UnsafeMutablePointer<Int8>!, aux: RString.__Unnamed_union_as.__Unnamed_struct_heap.__Unnamed_union_aux)
        }

        public var heap: RString.__Unnamed_union_as.__Unnamed_struct_heap

        public var ary: (Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8)

        public init(heap: RString.__Unnamed_union_as.__Unnamed_struct_heap)

        public init(ary: (Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8))

        public init()
    }

    public var basic: RBasic

    public var `as`: RString.__Unnamed_union_as

    public init()

    public init(basic: RBasic, as: RString.__Unnamed_union_as)
}

public var RARRAY_EMBED_LEN_MAX: Int { get }
public var RARRAY_EMBED_FLAG: Int { get }
/* RUBY_FL_USER2 is for ELTS_SHARED */
public var RARRAY_EMBED_LEN_MASK: Int { get }
public var RARRAY_EMBED_LEN_SHIFT: Int { get }

public var RARRAY_ENUM_END: Int { get }

public struct RArray {

    
    public struct __Unnamed_union_as {

        public struct __Unnamed_struct_heap {

            
            public struct __Unnamed_union_aux {

                public var capa: Int

                public var shared: VALUE

                public init(capa: Int)

                public init(shared: VALUE)

                public init()
            }

            public var len: Int

            public var aux: RArray.__Unnamed_union_as.__Unnamed_struct_heap.__Unnamed_union_aux

            public var ptr: UnsafePointer<VALUE>!

            public init()

            public init(len: Int, aux: RArray.__Unnamed_union_as.__Unnamed_struct_heap.__Unnamed_union_aux, ptr: UnsafePointer<VALUE>!)
        }

        public var heap: RArray.__Unnamed_union_as.__Unnamed_struct_heap

        public var ary: (VALUE, VALUE, VALUE)

        public init(heap: RArray.__Unnamed_union_as.__Unnamed_struct_heap)

        public init(ary: (VALUE, VALUE, VALUE))

        public init()
    }

    public var basic: RBasic

    public var `as`: RArray.__Unnamed_union_as

    public init()

    public init(basic: RBasic, as: RArray.__Unnamed_union_as)
}

/* */

public struct RRegexp {

    public var basic: RBasic

    public var ptr: OpaquePointer!

    public var src: VALUE

    public var usecnt: UInt

    public init()

    public init(basic: RBasic, ptr: OpaquePointer!, src: VALUE, usecnt: UInt)
}

/* RHASH_TBL allocates st_table if not available. */

public struct RFile {

    public var basic: RBasic

    public var fptr: OpaquePointer!

    public init()

    public init(basic: RBasic, fptr: OpaquePointer!)
}

public struct RData {

    public var basic: RBasic

    public var dmark: (@convention(c) (UnsafeMutableRawPointer?) -> Swift.Void)!

    public var dfree: (@convention(c) (UnsafeMutableRawPointer?) -> Swift.Void)!

    public var data: UnsafeMutableRawPointer!

    public init()

    public init(basic: RBasic, dmark: (@convention(c) (UnsafeMutableRawPointer?) -> Swift.Void)!, dfree: (@convention(c) (UnsafeMutableRawPointer?) -> Swift.Void)!, data: UnsafeMutableRawPointer!)
}

public typealias rb_data_type_t = rb_data_type_struct

public struct rb_data_type_struct {

    
    public struct __Unnamed_struct_function {

        public var dmark: (@convention(c) (UnsafeMutableRawPointer?) -> Swift.Void)!

        public var dfree: (@convention(c) (UnsafeMutableRawPointer?) -> Swift.Void)!

        public var dsize: (@convention(c) (UnsafeRawPointer?) -> Int)!

        public var reserved: (UnsafeMutableRawPointer?, UnsafeMutableRawPointer?) /* For future extension.
			      This array *must* be filled with ZERO. */

        public init()

        public init(dmark: (@convention(c) (UnsafeMutableRawPointer?) -> Swift.Void)!, dfree: (@convention(c) (UnsafeMutableRawPointer?) -> Swift.Void)!, dsize: (@convention(c) (UnsafeRawPointer?) -> Int)!, reserved: (UnsafeMutableRawPointer?, UnsafeMutableRawPointer?))
    }

    public var wrap_struct_name: UnsafePointer<Int8>!

    public var function: rb_data_type_struct.__Unnamed_struct_function

    public var parent: UnsafePointer<rb_data_type_struct>!

    public var data: UnsafeMutableRawPointer! /* This area can be used for any purpose
                          by a programmer who define the type. */

    
    public var flags: VALUE /* RUBY_FL_WB_PROTECTED */

    public init()

    public init(wrap_struct_name: UnsafePointer<Int8>!, function: rb_data_type_struct.__Unnamed_struct_function, parent: UnsafePointer<rb_data_type_struct>!, data: UnsafeMutableRawPointer!, flags: VALUE)
}

public var HAVE_TYPE_RB_DATA_TYPE_T: Int32 { get }
public var HAVE_RB_DATA_TYPE_T_FUNCTION: Int32 { get }
public var HAVE_RB_DATA_TYPE_T_PARENT: Int32 { get }

public struct RTypedData {

    public var basic: RBasic

    public var type: UnsafePointer<rb_data_type_t>!

    public var typed_flag: VALUE /* 1 or not */

    public var data: UnsafeMutableRawPointer!

    public init()

    public init(basic: RBasic, type: UnsafePointer<rb_data_type_t>!, typed_flag: VALUE, data: UnsafeMutableRawPointer!)
}

/*
#define RUBY_DATA_FUNC(func) ((void (*)(void*))(func))
*/
public typealias RUBY_DATA_FUNC = @convention(c) (UnsafeMutableRawPointer?) -> Swift.Void

public var RUBY_UNTYPED_DATA_WARNING: Int32 { get }

public func rb_data_object_wrap(_: VALUE, _: UnsafeMutableRawPointer!, _: CRuby.RUBY_DATA_FUNC!, _: CRuby.RUBY_DATA_FUNC!) -> VALUE
public func rb_data_object_zalloc(_: VALUE, _: Int, _: CRuby.RUBY_DATA_FUNC!, _: CRuby.RUBY_DATA_FUNC!) -> VALUE
public func rb_data_typed_object_wrap(_ klass: VALUE, _ datap: UnsafeMutableRawPointer!, _: UnsafePointer<rb_data_type_t>!) -> VALUE
public func rb_data_typed_object_zalloc(_ klass: VALUE, _ size: Int, _ type: UnsafePointer<rb_data_type_t>!) -> VALUE
public func rb_typeddata_inherited_p(_ child: UnsafePointer<rb_data_type_t>!, _ parent: UnsafePointer<rb_data_type_struct>!) -> Int32
public func rb_typeddata_is_kind_of(_: VALUE, _: UnsafePointer<rb_data_type_t>!) -> Int32
public func rb_check_typeddata(_: VALUE, _: UnsafePointer<rb_data_type_t>!) -> UnsafeMutableRawPointer!

/* bits for rb_data_type_struct::flags */
public var RUBY_TYPED_FREE_IMMEDIATELY: Int32 { get } /* TYPE field */
/* THIS FLAG DEPENDS ON Ruby version */
/* THIS FLAG DEPENDS ON Ruby version */

public var RSTRUCT_EMBED_LEN_MAX: Int { get }
public var RSTRUCT_EMBED_LEN_MASK: Int { get }
public var RSTRUCT_EMBED_LEN_SHIFT: Int { get }

public var RSTRUCT_ENUM_END: Int { get }

public struct RStruct {

    
    public struct __Unnamed_union_as {

        public struct __Unnamed_struct_heap {

            public var len: Int

            public var ptr: UnsafePointer<VALUE>!

            public init()

            public init(len: Int, ptr: UnsafePointer<VALUE>!)
        }

        public var heap: RStruct.__Unnamed_union_as.__Unnamed_struct_heap

        public var ary: (VALUE, VALUE, VALUE)

        public init(heap: RStruct.__Unnamed_union_as.__Unnamed_struct_heap)

        public init(ary: (VALUE, VALUE, VALUE))

        public init()
    }

    public var basic: RBasic

    public var `as`: RStruct.__Unnamed_union_as

    public init()

    public init(basic: RBasic, as: RStruct.__Unnamed_union_as)
}

public func rb_freeze_singleton_class(_ klass: VALUE)

public func rb_obj_freeze_inline(_ x: VALUE)

public func rb_data_object_get(_ obj: VALUE) -> UnsafeMutableRawPointer!

public func rb_data_object_make(_ klass: VALUE, _ mark_func: CRuby.RUBY_DATA_FUNC!, _ free_func: CRuby.RUBY_DATA_FUNC!, _ datap: UnsafeMutablePointer<UnsafeMutableRawPointer?>!, _ size: Int) -> VALUE

public func rb_data_typed_object_make(_ klass: VALUE, _ type: UnsafePointer<rb_data_type_t>!, _ datap: UnsafeMutablePointer<UnsafeMutableRawPointer?>!, _ size: Int) -> VALUE

@available(*, deprecated, message: "by rb_data_object_wrap")
public func rb_data_object_alloc(_ klass: VALUE, _ data: UnsafeMutableRawPointer!, _ dmark: CRuby.RUBY_DATA_FUNC!, _ dfree: CRuby.RUBY_DATA_FUNC!) -> VALUE

@available(*, deprecated, message: "by rb_data_typed_object_wrap")
public func rb_data_typed_object_alloc(_ klass: VALUE, _ datap: UnsafeMutableRawPointer!, _ type: UnsafePointer<rb_data_type_t>!) -> VALUE

public func rb_gc_writebarrier(_ a: VALUE, _ b: VALUE)
public func rb_gc_writebarrier_unprotect(_ obj: VALUE)

/* USE_RGENGC */

/* Write barrier (WB) interfaces:
 * - RB_OBJ_WRITE(a, slot, b): WB for new reference from `a' to `b'.
 *     Write `b' into `*slot'. `slot' is a pointer in `a'.
 * - RB_OBJ_WRITTEN(a, oldv, b): WB for new reference from `a' to `b'.
 *     This doesn't write any values, but only a WB declaration.
 *     `oldv' is replaced value with `b' (not used in current Ruby).
 *
 * NOTE: The following core interfaces can be changed in the future.
 *       Please catch up if you want to insert WB into C-extensions
 *       correctly.
 */

public var USE_RGENGC_LOGGING_WB_UNPROTECT: Int32 { get }

public func rb_obj_wb_unprotect(_ x: VALUE, _ filename: UnsafePointer<Int8>!, _ line: Int32) -> VALUE

public func rb_obj_written(_ a: VALUE, _ oldv: VALUE, _ b: VALUE, _ filename: UnsafePointer<Int8>!, _ line: Int32) -> VALUE

public func rb_obj_write(_ a: VALUE, _ slot: UnsafeMutablePointer<VALUE>!, _ b: VALUE, _ filename: UnsafePointer<Int8>!, _ line: Int32) -> VALUE

/* ignore `oldv' now */

public func rb_long2num_inline(_ v: Int) -> VALUE

public func rb_ulong2num_inline(_ v: UInt) -> VALUE

public func rb_num2char_inline(_ x: VALUE) -> Int8

public func rb_alloc_tmp_buffer(_ store: UnsafeMutablePointer<VALUE>!, _ len: Int) -> UnsafeMutableRawPointer!
public func rb_free_tmp_buffer(_ store: UnsafeMutablePointer<VALUE>!)
public func ruby_malloc_size_overflow(_: Int, _: Int) -> Never

public func ruby_xmalloc2_size(_ count: Int, _ elsize: Int) -> Int
/* allocates _n_ bytes temporary buffer and stores VALUE including it
 * in _v_.  _n_ may be evaluated twice. */

public var RUBY_ALLOCV_LIMIT: Int32 { get }

public func rb_obj_infect(_: VALUE, _: VALUE)

public typealias ruby_glob_func = (UnsafePointer<Int8>?, VALUE, UnsafeMutableRawPointer?) -> Int32
public func rb_glob(_: UnsafePointer<Int8>!, _: (@convention(c) (UnsafePointer<Int8>?, VALUE, UnsafeMutableRawPointer?) -> Swift.Void)!, _: VALUE)
public func ruby_glob(_: UnsafePointer<Int8>!, _: Int32, _: (@convention(c) (UnsafePointer<Int8>?, VALUE, UnsafeMutableRawPointer?) -> Int32)!, _: VALUE) -> Int32
public func ruby_brace_glob(_: UnsafePointer<Int8>!, _: Int32, _: (@convention(c) (UnsafePointer<Int8>?, VALUE, UnsafeMutableRawPointer?) -> Int32)!, _: VALUE) -> Int32

public func rb_define_class(_: UnsafePointer<Int8>!, _: VALUE) -> VALUE
public func rb_define_module(_: UnsafePointer<Int8>!) -> VALUE
public func rb_define_class_under(_: VALUE, _: UnsafePointer<Int8>!, _: VALUE) -> VALUE
public func rb_define_module_under(_: VALUE, _: UnsafePointer<Int8>!) -> VALUE

public func rb_include_module(_: VALUE, _: VALUE)
public func rb_extend_object(_: VALUE, _: VALUE)
public func rb_prepend_module(_: VALUE, _: VALUE)

public typealias rb_gvar_getter_t = (ID, UnsafeMutableRawPointer?, OpaquePointer?) -> VALUE
public typealias rb_gvar_setter_t = (VALUE, ID, UnsafeMutableRawPointer?, OpaquePointer?) -> Swift.Void
public typealias rb_gvar_marker_t = (UnsafeMutablePointer<VALUE>?) -> Swift.Void

public func rb_gvar_undef_getter(_ id: ID, _ data: UnsafeMutableRawPointer!, _ gvar: OpaquePointer!) -> VALUE
public func rb_gvar_undef_setter(_ val: VALUE, _ id: ID, _ data: UnsafeMutableRawPointer!, _ gvar: OpaquePointer!)
public func rb_gvar_undef_marker(_ `var`: UnsafeMutablePointer<VALUE>!)

public func rb_gvar_val_getter(_ id: ID, _ data: UnsafeMutableRawPointer!, _ gvar: OpaquePointer!) -> VALUE
public func rb_gvar_val_setter(_ val: VALUE, _ id: ID, _ data: UnsafeMutableRawPointer!, _ gvar: OpaquePointer!)
public func rb_gvar_val_marker(_ `var`: UnsafeMutablePointer<VALUE>!)

public func rb_gvar_var_getter(_ id: ID, _ data: UnsafeMutableRawPointer!, _ gvar: OpaquePointer!) -> VALUE
public func rb_gvar_var_setter(_ val: VALUE, _ id: ID, _ data: UnsafeMutableRawPointer!, _ gvar: OpaquePointer!)
public func rb_gvar_var_marker(_ `var`: UnsafeMutablePointer<VALUE>!)

public func rb_gvar_readonly_setter(_ val: VALUE, _ id: ID, _ data: UnsafeMutableRawPointer!, _ gvar: OpaquePointer!)

public func rb_define_variable(_: UnsafePointer<Int8>!, _: UnsafeMutablePointer<VALUE>!)
public func rb_define_virtual_variable(_: UnsafePointer<Int8>!, _: (@convention(c) () -> VALUE)!, _: (@convention(c) () -> Swift.Void)!)
public func rb_define_hooked_variable(_: UnsafePointer<Int8>!, _: UnsafeMutablePointer<VALUE>!, _: (@convention(c) () -> VALUE)!, _: (@convention(c) () -> Swift.Void)!)
public func rb_define_readonly_variable(_: UnsafePointer<Int8>!, _: UnsafePointer<VALUE>!)
public func rb_define_const(_: VALUE, _: UnsafePointer<Int8>!, _: VALUE)
public func rb_define_global_const(_: UnsafePointer<Int8>!, _: VALUE)

public func rb_define_method(_: VALUE, _: UnsafePointer<Int8>!, _: (@convention(c) () -> VALUE)!, _: Int32)
public func rb_define_module_function(_: VALUE, _: UnsafePointer<Int8>!, _: (@convention(c) () -> VALUE)!, _: Int32)
public func rb_define_global_function(_: UnsafePointer<Int8>!, _: (@convention(c) () -> VALUE)!, _: Int32)

public func rb_undef_method(_: VALUE, _: UnsafePointer<Int8>!)
public func rb_define_alias(_: VALUE, _: UnsafePointer<Int8>!, _: UnsafePointer<Int8>!)
public func rb_define_attr(_: VALUE, _: UnsafePointer<Int8>!, _: Int32, _: Int32)

public func rb_global_variable(_: UnsafeMutablePointer<VALUE>!)
public func rb_gc_register_mark_object(_: VALUE)
public func rb_gc_register_address(_: UnsafeMutablePointer<VALUE>!)
public func rb_gc_unregister_address(_: UnsafeMutablePointer<VALUE>!)

public func rb_intern(_: UnsafePointer<Int8>!) -> ID
public func rb_intern2(_: UnsafePointer<Int8>!, _: Int) -> ID
public func rb_intern_str(_ str: VALUE) -> ID
public func rb_id2name(_: ID) -> UnsafePointer<Int8>!
public func rb_check_id(_: UnsafeMutablePointer<VALUE>!) -> ID
public func rb_to_id(_: VALUE) -> ID
public func rb_id2str(_: ID) -> VALUE
public func rb_sym2str(_: VALUE) -> VALUE
public func rb_to_symbol(_ name: VALUE) -> VALUE
public func rb_check_symbol(_ namep: UnsafeMutablePointer<VALUE>!) -> VALUE

/* __builtin_constant_p and statement expression is available
 * since gcc-2.7.2.3 at least. */

public func rb_class2name(_: VALUE) -> UnsafePointer<Int8>!
public func rb_obj_classname(_: VALUE) -> UnsafePointer<Int8>!

public func rb_p(_: VALUE)

public func rb_eval_string(_: UnsafePointer<Int8>!) -> VALUE
public func rb_eval_string_protect(_: UnsafePointer<Int8>!, _: UnsafeMutablePointer<Int32>!) -> VALUE
public func rb_eval_string_wrap(_: UnsafePointer<Int8>!, _: UnsafeMutablePointer<Int32>!) -> VALUE

public func rb_funcallv(_: VALUE, _: ID, _: Int32, _: UnsafePointer<VALUE>!) -> VALUE
public func rb_funcallv_public(_: VALUE, _: ID, _: Int32, _: UnsafePointer<VALUE>!) -> VALUE

public func rb_funcall_passing_block(_: VALUE, _: ID, _: Int32, _: UnsafePointer<VALUE>!) -> VALUE
public func rb_funcall_with_block(_: VALUE, _: ID, _: Int32, _: UnsafePointer<VALUE>!, _: VALUE) -> VALUE

public func rb_call_super(_: Int32, _: UnsafePointer<VALUE>!) -> VALUE
public func rb_current_receiver() -> VALUE
public func rb_get_kwargs(_ keyword_hash: VALUE, _ table: UnsafePointer<ID>!, _ required: Int32, _ optional: Int32, _: UnsafeMutablePointer<VALUE>!) -> Int32
public func rb_extract_keywords(_ orighash: UnsafeMutablePointer<VALUE>!) -> VALUE

/* rb_scan_args() format allows ':' for optional hash */
public var HAVE_RB_SCAN_ARGS_OPTIONAL_HASH: Int32 { get }

public func rb_gv_set(_: UnsafePointer<Int8>!, _: VALUE) -> VALUE
public func rb_gv_get(_: UnsafePointer<Int8>!) -> VALUE
public func rb_iv_get(_: VALUE, _: UnsafePointer<Int8>!) -> VALUE
public func rb_iv_set(_: VALUE, _: UnsafePointer<Int8>!, _: VALUE) -> VALUE

public func rb_equal(_: VALUE, _: VALUE) -> VALUE

public func rb_ruby_verbose_ptr() -> UnsafeMutablePointer<VALUE>!
public func rb_ruby_debug_ptr() -> UnsafeMutablePointer<VALUE>!

/* for rb_readwrite_sys_fail first argument */
public struct rb_io_wait_readwrite : RawRepresentable, Equatable {

    public init(_ rawValue: UInt32)

    public init(rawValue: UInt32)

    public var rawValue: UInt32
}
public var RB_IO_WAIT_READABLE: rb_io_wait_readwrite { get }
public var RB_IO_WAIT_WRITABLE: rb_io_wait_readwrite { get }

public func rb_bug_errno(_: UnsafePointer<Int8>!, _: Int32) -> Never

public func rb_sys_fail(_: UnsafePointer<Int8>!) -> Never

public func rb_sys_fail_str(_: VALUE) -> Never

public func rb_mod_sys_fail(_: VALUE, _: UnsafePointer<Int8>!) -> Never

public func rb_mod_sys_fail_str(_: VALUE, _: VALUE) -> Never

public func rb_readwrite_sys_fail(_: rb_io_wait_readwrite, _: UnsafePointer<Int8>!) -> Never

public func rb_iter_break() -> Never

public func rb_iter_break_value(_: VALUE) -> Never

public func rb_exit(_: Int32) -> Never

public func rb_notimplement() -> Never

public func rb_syserr_new(_: Int32, _: UnsafePointer<Int8>!) -> VALUE
public func rb_syserr_new_str(_ n: Int32, _ arg: VALUE) -> VALUE
public func rb_syserr_fail(_: Int32, _: UnsafePointer<Int8>!) -> Never

public func rb_syserr_fail_str(_: Int32, _: VALUE) -> Never

public func rb_mod_syserr_fail(_: VALUE, _: Int32, _: UnsafePointer<Int8>!) -> Never

public func rb_mod_syserr_fail_str(_: VALUE, _: Int32, _: VALUE) -> Never

public func rb_readwrite_syserr_fail(_: rb_io_wait_readwrite, _: Int32, _: UnsafePointer<Int8>!) -> Never

/* reports if `-W' specified */

/* reports always */

public var RUBY_BLOCK_CALL_FUNC_TAKES_BLOCKARG: Int32 { get }

public typealias rb_block_call_func = (VALUE, VALUE, Int32, UnsafePointer<VALUE>?, VALUE) -> VALUE

public typealias rb_block_call_func_t = @convention(c) () -> VALUE

public func rb_each(_: VALUE) -> VALUE
public func rb_yield(_: VALUE) -> VALUE

public func rb_yield_values2(_ n: Int32, _ argv: UnsafePointer<VALUE>!) -> VALUE
public func rb_yield_splat(_: VALUE) -> VALUE
public func rb_yield_block(_: VALUE, _: VALUE, _: Int32, _: UnsafePointer<VALUE>!, _: VALUE) -> VALUE /* rb_block_call_func */
public func rb_block_given_p() -> Int32
public func rb_need_block()
public func rb_iterate(_: (@convention(c) (VALUE) -> VALUE)!, _: VALUE, _: (@convention(c) () -> VALUE)!, _: VALUE) -> VALUE
public func rb_block_call(_: VALUE, _: ID, _: Int32, _: UnsafePointer<VALUE>!, _: CRuby.rb_block_call_func_t!, _: VALUE) -> VALUE
public func rb_rescue(_: (@convention(c) () -> VALUE)!, _: VALUE, _: (@convention(c) () -> VALUE)!, _: VALUE) -> VALUE

public func rb_ensure(_: (@convention(c) () -> VALUE)!, _: VALUE, _: (@convention(c) () -> VALUE)!, _: VALUE) -> VALUE
public func rb_catch(_: UnsafePointer<Int8>!, _: (@convention(c) () -> VALUE)!, _: VALUE) -> VALUE
public func rb_catch_obj(_: VALUE, _: (@convention(c) () -> VALUE)!, _: VALUE) -> VALUE
public func rb_throw(_: UnsafePointer<Int8>!, _: VALUE) -> Never

public func rb_throw_obj(_: VALUE, _: VALUE) -> Never

public func rb_require(_: UnsafePointer<Int8>!) -> VALUE

public var rb_mKernel: VALUE
public var rb_mComparable: VALUE
public var rb_mEnumerable: VALUE
public var rb_mErrno: VALUE
public var rb_mFileTest: VALUE
public var rb_mGC: VALUE
public var rb_mMath: VALUE
public var rb_mProcess: VALUE
public var rb_mWaitReadable: VALUE
public var rb_mWaitWritable: VALUE

public var rb_cBasicObject: VALUE
public var rb_cObject: VALUE
public var rb_cArray: VALUE
public var rb_cBignum: VALUE
public var rb_cBinding: VALUE
public var rb_cClass: VALUE
public var rb_cCont: VALUE
public var rb_cDir: VALUE
public var rb_cData: VALUE
public var rb_cFalseClass: VALUE
public var rb_cEncoding: VALUE
public var rb_cEnumerator: VALUE
public var rb_cFile: VALUE
public var rb_cFixnum: VALUE
public var rb_cFloat: VALUE
public var rb_cHash: VALUE
public var rb_cInteger: VALUE
public var rb_cIO: VALUE
public var rb_cMatch: VALUE
public var rb_cMethod: VALUE
public var rb_cModule: VALUE
public var rb_cNameErrorMesg: VALUE
public var rb_cNilClass: VALUE
public var rb_cNumeric: VALUE
public var rb_cProc: VALUE
public var rb_cRandom: VALUE
public var rb_cRange: VALUE
public var rb_cRational: VALUE
public var rb_cComplex: VALUE
public var rb_cRegexp: VALUE
public var rb_cStat: VALUE
public var rb_cString: VALUE
public var rb_cStruct: VALUE
public var rb_cSymbol: VALUE
public var rb_cThread: VALUE
public var rb_cTime: VALUE
public var rb_cTrueClass: VALUE
public var rb_cUnboundMethod: VALUE

public var rb_eException: VALUE
public var rb_eStandardError: VALUE
public var rb_eSystemExit: VALUE
public var rb_eInterrupt: VALUE
public var rb_eSignal: VALUE
public var rb_eFatal: VALUE
public var rb_eArgError: VALUE
public var rb_eEOFError: VALUE
public var rb_eIndexError: VALUE
public var rb_eStopIteration: VALUE
public var rb_eKeyError: VALUE
public var rb_eRangeError: VALUE
public var rb_eIOError: VALUE
public var rb_eRuntimeError: VALUE
public var rb_eSecurityError: VALUE
public var rb_eSystemCallError: VALUE
public var rb_eThreadError: VALUE
public var rb_eTypeError: VALUE
public var rb_eZeroDivError: VALUE
public var rb_eNotImpError: VALUE
public var rb_eNoMemError: VALUE
public var rb_eNoMethodError: VALUE
public var rb_eFloatDomainError: VALUE
public var rb_eLocalJumpError: VALUE
public var rb_eSysStackError: VALUE
public var rb_eRegexpError: VALUE
public var rb_eEncodingError: VALUE
public var rb_eEncCompatError: VALUE

public var rb_eScriptError: VALUE
public var rb_eNameError: VALUE
public var rb_eSyntaxError: VALUE
public var rb_eLoadError: VALUE

public var rb_eMathDomainError: VALUE

public var rb_stdin: VALUE
public var rb_stdout: VALUE
public var rb_stderr: VALUE

public func rb_class_of(_ obj: VALUE) -> VALUE

public func rb_type(_ obj: VALUE) -> Int32
/* This is a public domain general purpose hash table package written by Peter Moore @ UCB. */

/* @(#) st.h 5.1 89/12/14 */

/* satisfy cc-mode */

public typealias st_data_t = UInt

public typealias st_index_t = st_data_t
public typealias st_compare_func = (st_data_t, st_data_t) -> Int32
public typealias st_hash_func = (st_data_t) -> st_index_t

public typealias st_check_for_sizeof_st_index_t = (Int8)
public var SIZEOF_ST_INDEX_T: Int32 { get }

public struct st_hash_type {

    public var compare: (@convention(c) () -> Int32)! /*st_data_t, st_data_t*/ /* st_compare_func* */

    public var hash: (@convention(c) () -> st_index_t)! /*st_data_t*/ /* st_hash_func* */

    public init()

    public init(compare: (@convention(c) () -> Int32)!, hash: (@convention(c) () -> st_index_t)!)
}

public struct st_table {

    
    /*
     * C spec says,
     *   A bit-field shall have a type that is a qualified or unqualified
     *   version of _Bool, signed int, unsigned int, or some other
     *   implementation-defined type. It is implementation-defined whether
     *   atomic types are permitted.
     * In short, long and long long bit-field are implementation-defined
     * feature. Therefore we want to suppress a warning explicitly.
     */
    
    public struct __Unnamed_union_as {

        public struct __Unnamed_struct_big {

            public var bins: UnsafeMutablePointer<OpaquePointer?>!

            public var private_list_head: (UnsafeMutableRawPointer?, UnsafeMutableRawPointer?)

            public init()

            public init(bins: UnsafeMutablePointer<OpaquePointer?>!, private_list_head: (UnsafeMutableRawPointer?, UnsafeMutableRawPointer?))
        }

        public struct __Unnamed_struct_packed {

            public var entries: OpaquePointer!

            public var real_entries: st_index_t

            public init()

            public init(entries: OpaquePointer!, real_entries: st_index_t)
        }

        public var big: st_table.__Unnamed_union_as.__Unnamed_struct_big

        public var packed: st_table.__Unnamed_union_as.__Unnamed_struct_packed

        public init(big: st_table.__Unnamed_union_as.__Unnamed_struct_big)

        public init(packed: st_table.__Unnamed_union_as.__Unnamed_struct_packed)

        public init()
    }

    public var type: UnsafePointer<st_hash_type>!

    public var num_bins: st_index_t

    public var entries_packed: UInt32

    public var num_entries: st_index_t

    public var `as`: st_table.__Unnamed_union_as

    public init()

    public init(type: UnsafePointer<st_hash_type>!, num_bins: st_index_t, entries_packed: UInt32, num_entries: st_index_t, as: st_table.__Unnamed_union_as)
}

public struct st_retval : RawRepresentable, Equatable {

    public init(_ rawValue: UInt32)

    public init(rawValue: UInt32)

    public var rawValue: UInt32
}
public var ST_CONTINUE: st_retval { get }
public var ST_STOP: st_retval { get }
public var ST_DELETE: st_retval { get }
public var ST_CHECK: st_retval { get }

public func st_init_table(_: UnsafePointer<st_hash_type>!) -> UnsafeMutablePointer<st_table>!
public func st_init_table_with_size(_: UnsafePointer<st_hash_type>!, _: st_index_t) -> UnsafeMutablePointer<st_table>!
public func st_init_numtable() -> UnsafeMutablePointer<st_table>!
public func st_init_numtable_with_size(_: st_index_t) -> UnsafeMutablePointer<st_table>!
public func st_init_strtable() -> UnsafeMutablePointer<st_table>!
public func st_init_strtable_with_size(_: st_index_t) -> UnsafeMutablePointer<st_table>!
public func st_init_strcasetable() -> UnsafeMutablePointer<st_table>!
public func st_init_strcasetable_with_size(_: st_index_t) -> UnsafeMutablePointer<st_table>!
public func st_delete(_: UnsafeMutablePointer<st_table>!, _: UnsafeMutablePointer<st_data_t>!, _: UnsafeMutablePointer<st_data_t>!) -> Int32 /* returns 0:notfound 1:deleted */
public func st_delete_safe(_: UnsafeMutablePointer<st_table>!, _: UnsafeMutablePointer<st_data_t>!, _: UnsafeMutablePointer<st_data_t>!, _: st_data_t) -> Int32
public func st_shift(_: UnsafeMutablePointer<st_table>!, _: UnsafeMutablePointer<st_data_t>!, _: UnsafeMutablePointer<st_data_t>!) -> Int32 /* returns 0:notfound 1:deleted */
public func st_insert(_: UnsafeMutablePointer<st_table>!, _: st_data_t, _: st_data_t) -> Int32
public func st_insert2(_: UnsafeMutablePointer<st_table>!, _: st_data_t, _: st_data_t, _: (@convention(c) (st_data_t) -> st_data_t)!) -> Int32
public func st_lookup(_: UnsafeMutablePointer<st_table>!, _: st_data_t, _: UnsafeMutablePointer<st_data_t>!) -> Int32
public func st_get_key(_: UnsafeMutablePointer<st_table>!, _: st_data_t, _: UnsafeMutablePointer<st_data_t>!) -> Int32
public typealias st_update_callback_func = (UnsafeMutablePointer<st_data_t>?, UnsafeMutablePointer<st_data_t>?, st_data_t, Int32) -> Int32
/* *key may be altered, but must equal to the old key, i.e., the
 * results of hash() are same and compare() returns 0, otherwise the
 * behavior is undefined */
public func st_update(_ table: UnsafeMutablePointer<st_table>!, _ key: st_data_t, _ func: (@convention(c) (UnsafeMutablePointer<st_data_t>?, UnsafeMutablePointer<st_data_t>?, st_data_t, Int32) -> Int32)!, _ arg: st_data_t) -> Int32
public func st_foreach(_: UnsafeMutablePointer<st_table>!, _: (@convention(c) () -> Int32)!, _: st_data_t) -> Int32
public func st_foreach_check(_: UnsafeMutablePointer<st_table>!, _: (@convention(c) () -> Int32)!, _: st_data_t, _: st_data_t) -> Int32
public func st_reverse_foreach(_: UnsafeMutablePointer<st_table>!, _: (@convention(c) () -> Int32)!, _: st_data_t) -> Int32
public func st_keys(_ table: UnsafeMutablePointer<st_table>!, _ keys: UnsafeMutablePointer<st_data_t>!, _ size: st_index_t) -> st_index_t
public func st_keys_check(_ table: UnsafeMutablePointer<st_table>!, _ keys: UnsafeMutablePointer<st_data_t>!, _ size: st_index_t, _ never: st_data_t) -> st_index_t
public func st_values(_ table: UnsafeMutablePointer<st_table>!, _ values: UnsafeMutablePointer<st_data_t>!, _ size: st_index_t) -> st_index_t
public func st_values_check(_ table: UnsafeMutablePointer<st_table>!, _ values: UnsafeMutablePointer<st_data_t>!, _ size: st_index_t, _ never: st_data_t) -> st_index_t
public func st_add_direct(_: UnsafeMutablePointer<st_table>!, _: st_data_t, _: st_data_t)
public func st_free_table(_: UnsafeMutablePointer<st_table>!)
public func st_cleanup_safe(_: UnsafeMutablePointer<st_table>!, _: st_data_t)
public func st_clear(_: UnsafeMutablePointer<st_table>!)
public func st_copy(_: UnsafeMutablePointer<st_table>!) -> UnsafeMutablePointer<st_table>!
public func st_numcmp(_: st_data_t, _: st_data_t) -> Int32
public func st_numhash(_: st_data_t) -> st_index_t

public func st_memsize(_: UnsafePointer<st_table>!) -> Int
public func st_hash(_ ptr: UnsafeRawPointer!, _ len: Int, _ h: st_index_t) -> st_index_t
public func st_hash_uint32(_ h: st_index_t, _ i: UInt32) -> st_index_t
public func st_hash_uint(_ h: st_index_t, _ i: st_index_t) -> st_index_t
public func st_hash_end(_ h: st_index_t) -> st_index_t
public func st_hash_start(_ h: st_index_t) -> st_index_t
/**********************************************************************

  intern.h -

  $Author: nagachika $
  created at: Thu Jun 10 14:22:17 JST 1993

  Copyright (C) 1993-2007 Yukihiro Matsumoto
  Copyright (C) 2000  Network Applied Communication Laboratory, Inc.
  Copyright (C) 2000  Information-technology Promotion Agency, Japan

**********************************************************************/

/* satisfy cc-mode */

/*
 * Functions and variables that are used by more than one source file of
 * the kernel.
 */

public var UNLIMITED_ARGUMENTS: Int32 { get }

/* array.c */
public func rb_mem_clear(_: UnsafeMutablePointer<VALUE>!, _: Int)
public func rb_assoc_new(_: VALUE, _: VALUE) -> VALUE
public func rb_check_array_type(_: VALUE) -> VALUE
public func rb_ary_new() -> VALUE
public func rb_ary_new_capa(_ capa: Int) -> VALUE

public func rb_ary_new_from_values(_ n: Int, _ elts: UnsafePointer<VALUE>!) -> VALUE
public func rb_ary_tmp_new(_: Int) -> VALUE
public func rb_ary_free(_: VALUE)
public func rb_ary_modify(_: VALUE)
public func rb_ary_freeze(_: VALUE) -> VALUE
public func rb_ary_shared_with_p(_: VALUE, _: VALUE) -> VALUE
public func rb_ary_aref(_: Int32, _: UnsafePointer<VALUE>!, _: VALUE) -> VALUE
public func rb_ary_subseq(_: VALUE, _: Int, _: Int) -> VALUE
public func rb_ary_store(_: VALUE, _: Int, _: VALUE)
public func rb_ary_dup(_: VALUE) -> VALUE
public func rb_ary_resurrect(_ ary: VALUE) -> VALUE
public func rb_ary_to_ary(_: VALUE) -> VALUE
public func rb_ary_to_s(_: VALUE) -> VALUE
public func rb_ary_cat(_: VALUE, _: UnsafePointer<VALUE>!, _: Int) -> VALUE
public func rb_ary_push(_: VALUE, _: VALUE) -> VALUE
public func rb_ary_pop(_: VALUE) -> VALUE
public func rb_ary_shift(_: VALUE) -> VALUE
public func rb_ary_unshift(_: VALUE, _: VALUE) -> VALUE
public func rb_ary_entry(_: VALUE, _: Int) -> VALUE
public func rb_ary_each(_: VALUE) -> VALUE
public func rb_ary_join(_: VALUE, _: VALUE) -> VALUE
public func rb_ary_reverse(_: VALUE) -> VALUE
public func rb_ary_rotate(_: VALUE, _: Int) -> VALUE
public func rb_ary_sort(_: VALUE) -> VALUE
public func rb_ary_sort_bang(_: VALUE) -> VALUE
public func rb_ary_delete(_: VALUE, _: VALUE) -> VALUE
public func rb_ary_delete_at(_: VALUE, _: Int) -> VALUE
public func rb_ary_clear(_: VALUE) -> VALUE
public func rb_ary_plus(_: VALUE, _: VALUE) -> VALUE
public func rb_ary_concat(_: VALUE, _: VALUE) -> VALUE
public func rb_ary_assoc(_: VALUE, _: VALUE) -> VALUE
public func rb_ary_rassoc(_: VALUE, _: VALUE) -> VALUE
public func rb_ary_includes(_: VALUE, _: VALUE) -> VALUE
public func rb_ary_cmp(_: VALUE, _: VALUE) -> VALUE
public func rb_ary_replace(_ copy: VALUE, _ orig: VALUE) -> VALUE
public func rb_get_values_at(_: VALUE, _: Int, _: Int32, _: UnsafePointer<VALUE>!, _: (@convention(c) (VALUE, Int) -> VALUE)!) -> VALUE
public func rb_ary_resize(_ ary: VALUE, _ len: Int) -> VALUE

/* bignum.c */
public func rb_big_new(_: Int, _: Int32) -> VALUE
public func rb_bigzero_p(_ x: VALUE) -> Int32
public func rb_big_clone(_: VALUE) -> VALUE
public func rb_big_2comp(_: VALUE)
public func rb_big_norm(_: VALUE) -> VALUE
public func rb_big_resize(_ big: VALUE, _ len: Int)
public func rb_cstr_to_inum(_: UnsafePointer<Int8>!, _: Int32, _: Int32) -> VALUE
public func rb_str_to_inum(_: VALUE, _: Int32, _: Int32) -> VALUE
public func rb_cstr2inum(_: UnsafePointer<Int8>!, _: Int32) -> VALUE
public func rb_str2inum(_: VALUE, _: Int32) -> VALUE
public func rb_big2str(_: VALUE, _: Int32) -> VALUE
public func rb_big2long(_: VALUE) -> Int

public func rb_big2ulong(_: VALUE) -> UInt

public func rb_big2ll(_: VALUE) -> Int64
public func rb_big2ull(_: VALUE) -> UInt64
/* HAVE_LONG_LONG */
public func rb_big_pack(_ val: VALUE, _ buf: UnsafeMutablePointer<UInt>!, _ num_longs: Int)
public func rb_big_unpack(_ buf: UnsafeMutablePointer<UInt>!, _ num_longs: Int) -> VALUE
public func rb_uv_to_utf8(_: UnsafeMutablePointer<Int8>!, _: UInt) -> Int32
public func rb_dbl2big(_: Double) -> VALUE
public func rb_big2dbl(_: VALUE) -> Double
public func rb_big_cmp(_: VALUE, _: VALUE) -> VALUE
public func rb_big_eq(_: VALUE, _: VALUE) -> VALUE
public func rb_big_eql(_: VALUE, _: VALUE) -> VALUE
public func rb_big_plus(_: VALUE, _: VALUE) -> VALUE
public func rb_big_minus(_: VALUE, _: VALUE) -> VALUE
public func rb_big_mul(_: VALUE, _: VALUE) -> VALUE
public func rb_big_div(_: VALUE, _: VALUE) -> VALUE
public func rb_big_idiv(_: VALUE, _: VALUE) -> VALUE
public func rb_big_modulo(_: VALUE, _: VALUE) -> VALUE
public func rb_big_divmod(_: VALUE, _: VALUE) -> VALUE
public func rb_big_pow(_: VALUE, _: VALUE) -> VALUE
public func rb_big_and(_: VALUE, _: VALUE) -> VALUE
public func rb_big_or(_: VALUE, _: VALUE) -> VALUE
public func rb_big_xor(_: VALUE, _: VALUE) -> VALUE
public func rb_big_lshift(_: VALUE, _: VALUE) -> VALUE
public func rb_big_rshift(_: VALUE, _: VALUE) -> VALUE
public func rb_big_hash(_: VALUE) -> VALUE

/* For rb_integer_pack and rb_integer_unpack: */
/* "MS" in MSWORD and MSBYTE means "most significant" */
/* "LS" in LSWORD and LSBYTE means "least significant" */
public var INTEGER_PACK_MSWORD_FIRST: Int32 { get }
public var INTEGER_PACK_LSWORD_FIRST: Int32 { get }
public var INTEGER_PACK_MSBYTE_FIRST: Int32 { get }
public var INTEGER_PACK_LSBYTE_FIRST: Int32 { get }
public var INTEGER_PACK_NATIVE_BYTE_ORDER: Int32 { get }
public var INTEGER_PACK_2COMP: Int32 { get }
public var INTEGER_PACK_FORCE_GENERIC_IMPLEMENTATION: Int32 { get }
/* For rb_integer_unpack: */
public var INTEGER_PACK_FORCE_BIGNUM: Int32 { get }
public var INTEGER_PACK_NEGATIVE: Int32 { get }
/* Combinations: */
public var INTEGER_PACK_LITTLE_ENDIAN: Int32 { get }
public var INTEGER_PACK_BIG_ENDIAN: Int32 { get }
public func rb_integer_pack(_ val: VALUE, _ words: UnsafeMutableRawPointer!, _ numwords: Int, _ wordsize: Int, _ nails: Int, _ flags: Int32) -> Int32
public func rb_integer_unpack(_ words: UnsafeRawPointer!, _ numwords: Int, _ wordsize: Int, _ nails: Int, _ flags: Int32) -> VALUE
public func rb_absint_size(_ val: VALUE, _ nlz_bits_ret: UnsafeMutablePointer<Int32>!) -> Int
public func rb_absint_numwords(_ val: VALUE, _ word_numbits: Int, _ nlz_bits_ret: UnsafeMutablePointer<Int>!) -> Int
public func rb_absint_singlebit_p(_ val: VALUE) -> Int32

/* rational.c */
public func rb_rational_raw(_: VALUE, _: VALUE) -> VALUE

public func rb_rational_new(_: VALUE, _: VALUE) -> VALUE

public func rb_Rational(_: VALUE, _: VALUE) -> VALUE

public func rb_rational_num(_ rat: VALUE) -> VALUE
public func rb_rational_den(_ rat: VALUE) -> VALUE
public func rb_flt_rationalize_with_prec(_: VALUE, _: VALUE) -> VALUE
public func rb_flt_rationalize(_: VALUE) -> VALUE
/* complex.c */
public func rb_complex_raw(_: VALUE, _: VALUE) -> VALUE

public func rb_complex_new(_: VALUE, _: VALUE) -> VALUE

public func rb_complex_polar(_: VALUE, _: VALUE) -> VALUE
public func rb_Complex(_: VALUE, _: VALUE) -> VALUE

@available(*, deprecated)
public func rb_complex_set_real(_: VALUE, _: VALUE) -> VALUE

@available(*, deprecated)
public func rb_complex_set_imag(_: VALUE, _: VALUE) -> VALUE

/* class.c */
public func rb_class_boot(_: VALUE) -> VALUE
public func rb_class_new(_: VALUE) -> VALUE
public func rb_mod_init_copy(_: VALUE, _: VALUE) -> VALUE
public func rb_singleton_class_clone(_: VALUE) -> VALUE
public func rb_singleton_class_attached(_: VALUE, _: VALUE)
public func rb_make_metaclass(_: VALUE, _: VALUE) -> VALUE
public func rb_check_inheritable(_: VALUE)
public func rb_class_inherited(_: VALUE, _: VALUE) -> VALUE
public func rb_define_class_id(_: ID, _: VALUE) -> VALUE
public func rb_define_class_id_under(_: VALUE, _: ID, _: VALUE) -> VALUE
public func rb_module_new() -> VALUE
public func rb_define_module_id(_: ID) -> VALUE
public func rb_define_module_id_under(_: VALUE, _: ID) -> VALUE
public func rb_include_class_new(_: VALUE, _: VALUE) -> VALUE
public func rb_mod_included_modules(_: VALUE) -> VALUE
public func rb_mod_include_p(_: VALUE, _: VALUE) -> VALUE
public func rb_mod_ancestors(_: VALUE) -> VALUE
public func rb_class_instance_methods(_: Int32, _: UnsafePointer<VALUE>!, _: VALUE) -> VALUE
public func rb_class_public_instance_methods(_: Int32, _: UnsafePointer<VALUE>!, _: VALUE) -> VALUE
public func rb_class_protected_instance_methods(_: Int32, _: UnsafePointer<VALUE>!, _: VALUE) -> VALUE
public func rb_class_private_instance_methods(_: Int32, _: UnsafePointer<VALUE>!, _: VALUE) -> VALUE
public func rb_obj_singleton_methods(_: Int32, _: UnsafePointer<VALUE>!, _: VALUE) -> VALUE
public func rb_define_method_id(_: VALUE, _: ID, _: (@convention(c) () -> VALUE)!, _: Int32)
public func rb_frozen_class_p(_: VALUE)
public func rb_undef(_: VALUE, _: ID)
public func rb_define_protected_method(_: VALUE, _: UnsafePointer<Int8>!, _: (@convention(c) () -> VALUE)!, _: Int32)
public func rb_define_private_method(_: VALUE, _: UnsafePointer<Int8>!, _: (@convention(c) () -> VALUE)!, _: Int32)
public func rb_define_singleton_method(_: VALUE, _: UnsafePointer<Int8>!, _: (@convention(c) () -> VALUE)!, _: Int32)
public func rb_singleton_class(_: VALUE) -> VALUE
/* compar.c */
public func rb_cmpint(_: VALUE, _: VALUE, _: VALUE) -> Int32
public func rb_cmperr(_: VALUE, _: VALUE) -> Never

/* cont.c */
public func rb_fiber_new(_: (@convention(c) () -> VALUE)!, _: VALUE) -> VALUE
public func rb_fiber_resume(_ fib: VALUE, _ argc: Int32, _ argv: UnsafePointer<VALUE>!) -> VALUE
public func rb_fiber_yield(_ argc: Int32, _ argv: UnsafePointer<VALUE>!) -> VALUE
public func rb_fiber_current() -> VALUE
public func rb_fiber_alive_p(_: VALUE) -> VALUE
/* enum.c */
public func rb_enum_values_pack(_: Int32, _: UnsafePointer<VALUE>!) -> VALUE
/* enumerator.c */
public func rb_enumeratorize(_: VALUE, _: VALUE, _: Int32, _: UnsafePointer<VALUE>!) -> VALUE
public typealias rb_enumerator_size_func = (VALUE, VALUE, VALUE) -> VALUE
public func rb_enumeratorize_with_size(_: VALUE, _: VALUE, _: Int32, _: UnsafePointer<VALUE>!, _: (@convention(c) (VALUE, VALUE, VALUE) -> VALUE)!) -> VALUE

/* error.c */
public func rb_exc_new(_: VALUE, _: UnsafePointer<Int8>!, _: Int) -> VALUE
public func rb_exc_new_cstr(_: VALUE, _: UnsafePointer<Int8>!) -> VALUE
public func rb_exc_new_str(_: VALUE, _: VALUE) -> VALUE

public func rb_invalid_str(_: UnsafePointer<Int8>!, _: UnsafePointer<Int8>!) -> Never

public func rb_error_frozen(_: UnsafePointer<Int8>!) -> Never

public func rb_error_frozen_object(_: VALUE) -> Never

public func rb_error_untrusted(_: VALUE)
public func rb_check_frozen(_: VALUE)
public func rb_check_trusted(_: VALUE)

public func rb_check_copyable(_ obj: VALUE, _ orig: VALUE)

/* eval.c */
public func rb_sourceline() -> Int32
public func rb_sourcefile() -> UnsafePointer<Int8>!
public func rb_check_funcall(_: VALUE, _: ID, _: Int32, _: UnsafePointer<VALUE>!) -> VALUE

public func rb_error_arity(_: Int32, _: Int32, _: Int32) -> Never

/* for ifdef */
public func rb_check_arity(_ argc: Int32, _ min: Int32, _ max: Int32)

public struct rb_fdset_t {

    public var maxfd: Int32

    public var fdset: UnsafeMutablePointer<fd_set>!

    public init()

    public init(maxfd: Int32, fdset: UnsafeMutablePointer<fd_set>!)
}

public func rb_fd_init(_: UnsafeMutablePointer<rb_fdset_t>!)
public func rb_fd_term(_: UnsafeMutablePointer<rb_fdset_t>!)
public func rb_fd_zero(_: UnsafeMutablePointer<rb_fdset_t>!)
public func rb_fd_set(_: Int32, _: UnsafeMutablePointer<rb_fdset_t>!)
public func rb_fd_clr(_: Int32, _: UnsafeMutablePointer<rb_fdset_t>!)
public func rb_fd_isset(_: Int32, _: UnsafePointer<rb_fdset_t>!) -> Int32
public func rb_fd_copy(_: UnsafeMutablePointer<rb_fdset_t>!, _: UnsafePointer<fd_set>!, _: Int32)
public func rb_fd_dup(_ dst: UnsafeMutablePointer<rb_fdset_t>!, _ src: UnsafePointer<rb_fdset_t>!)

public func rb_fd_select(_: Int32, _: UnsafeMutablePointer<rb_fdset_t>!, _: UnsafeMutablePointer<rb_fdset_t>!, _: UnsafeMutablePointer<rb_fdset_t>!, _: UnsafeMutablePointer<timeval>!) -> Int32

public func rb_exc_raise(_: VALUE) -> Never

public func rb_exc_fatal(_: VALUE) -> Never

public func rb_f_exit(_: Int32, _: UnsafePointer<VALUE>!) -> VALUE
public func rb_f_abort(_: Int32, _: UnsafePointer<VALUE>!) -> VALUE
public func rb_remove_method(_: VALUE, _: UnsafePointer<Int8>!)
public func rb_remove_method_id(_: VALUE, _: ID)

@available(*, deprecated)
public func rb_disable_super()

/* obsolete - no use */

@available(*, deprecated)
public func rb_enable_super()

public var HAVE_RB_DEFINE_ALLOC_FUNC: Int32 { get }
public typealias rb_alloc_func_t = @convention(c) (VALUE) -> VALUE
public func rb_define_alloc_func(_: VALUE, _: CRuby.rb_alloc_func_t!)
public func rb_undef_alloc_func(_: VALUE)
public func rb_get_alloc_func(_: VALUE) -> CRuby.rb_alloc_func_t!
@available(*, deprecated)
public func rb_clear_cache()

public func rb_clear_constant_cache()
public func rb_clear_method_cache_by_class(_: VALUE)
public func rb_alias(_: VALUE, _: ID, _: ID)
public func rb_attr(_: VALUE, _: ID, _: Int32, _: Int32, _: Int32)
public func rb_method_boundp(_: VALUE, _: ID, _: Int32) -> Int32
public func rb_method_basic_definition_p(_: VALUE, _: ID) -> Int32
public func rb_eval_cmd(_: VALUE, _: VALUE, _: Int32) -> VALUE
public func rb_obj_respond_to(_: VALUE, _: ID, _: Int32) -> Int32
public func rb_respond_to(_: VALUE, _: ID) -> Int32
public func rb_f_notimplement(_ argc: Int32, _ argv: UnsafePointer<VALUE>!, _ obj: VALUE) -> VALUE

public func rb_interrupt()
public func rb_apply(_: VALUE, _: ID, _: VALUE) -> VALUE
public func rb_backtrace()
public func rb_frame_this_func() -> ID
public func rb_obj_instance_eval(_: Int32, _: UnsafePointer<VALUE>!, _: VALUE) -> VALUE
public func rb_obj_instance_exec(_: Int32, _: UnsafePointer<VALUE>!, _: VALUE) -> VALUE
public func rb_mod_module_eval(_: Int32, _: UnsafePointer<VALUE>!, _: VALUE) -> VALUE
public func rb_mod_module_exec(_: Int32, _: UnsafePointer<VALUE>!, _: VALUE) -> VALUE
public func rb_load(_: VALUE, _: Int32)
public func rb_load_protect(_: VALUE, _: Int32, _: UnsafeMutablePointer<Int32>!)
public func rb_jump_tag(_: Int32) -> Never

public func rb_provided(_: UnsafePointer<Int8>!) -> Int32
public func rb_feature_provided(_: UnsafePointer<Int8>!, _: UnsafeMutablePointer<UnsafePointer<Int8>?>!) -> Int32
public func rb_provide(_: UnsafePointer<Int8>!)
public func rb_f_require(_: VALUE, _: VALUE) -> VALUE
public func rb_require_safe(_: VALUE, _: Int32) -> VALUE
public func rb_obj_call_init(_: VALUE, _: Int32, _: UnsafePointer<VALUE>!)
public func rb_class_new_instance(_: Int32, _: UnsafePointer<VALUE>!, _: VALUE) -> VALUE
public func rb_block_proc() -> VALUE
public func rb_block_lambda() -> VALUE
public func rb_proc_new(_: (@convention(c) () -> VALUE)!, _: VALUE) -> VALUE /* VALUE yieldarg[, VALUE procarg] */
public func rb_obj_is_proc(_: VALUE) -> VALUE
public func rb_proc_call(_: VALUE, _: VALUE) -> VALUE
public func rb_proc_call_with_block(_: VALUE, _ argc: Int32, _ argv: UnsafePointer<VALUE>!, _: VALUE) -> VALUE
public func rb_proc_arity(_: VALUE) -> Int32
public func rb_proc_lambda_p(_: VALUE) -> VALUE
public func rb_binding_new() -> VALUE
public func rb_obj_method(_: VALUE, _: VALUE) -> VALUE
public func rb_obj_is_method(_: VALUE) -> VALUE
public func rb_method_call(_: Int32, _: UnsafePointer<VALUE>!, _: VALUE) -> VALUE
public func rb_method_call_with_block(_: Int32, _: UnsafePointer<VALUE>!, _: VALUE, _: VALUE) -> VALUE
public func rb_mod_method_arity(_: VALUE, _: ID) -> Int32
public func rb_obj_method_arity(_: VALUE, _: ID) -> Int32
public func rb_protect(_: (@convention(c) (VALUE) -> VALUE)!, _: VALUE, _: UnsafeMutablePointer<Int32>!) -> VALUE
public func rb_set_end_proc(_: (@convention(c) (VALUE) -> Swift.Void)!, _: VALUE)
public func rb_exec_end_proc()
public func rb_thread_schedule()
public func rb_thread_wait_fd(_: Int32)
public func rb_thread_fd_writable(_: Int32) -> Int32
public func rb_thread_fd_close(_: Int32)
public func rb_thread_alone() -> Int32
public func rb_thread_sleep(_: Int32)
public func rb_thread_sleep_forever()
public func rb_thread_sleep_deadly()
public func rb_thread_stop() -> VALUE
public func rb_thread_wakeup(_: VALUE) -> VALUE
public func rb_thread_wakeup_alive(_: VALUE) -> VALUE
public func rb_thread_run(_: VALUE) -> VALUE
public func rb_thread_kill(_: VALUE) -> VALUE
public func rb_thread_create(_: (@convention(c) () -> VALUE)!, _: UnsafeMutableRawPointer!) -> VALUE
public func rb_thread_fd_select(_: Int32, _: UnsafeMutablePointer<rb_fdset_t>!, _: UnsafeMutablePointer<rb_fdset_t>!, _: UnsafeMutablePointer<rb_fdset_t>!, _: UnsafeMutablePointer<timeval>!) -> Int32
public func rb_thread_wait_for(_: timeval)
public func rb_thread_current() -> VALUE
public func rb_thread_main() -> VALUE
public func rb_thread_local_aref(_: VALUE, _: ID) -> VALUE
public func rb_thread_local_aset(_: VALUE, _: ID, _: VALUE) -> VALUE
public func rb_thread_atfork()
public func rb_thread_atfork_before_exec()
public func rb_exec_recursive(_: (@convention(c) (VALUE, VALUE, Int32) -> VALUE)!, _: VALUE, _: VALUE) -> VALUE
public func rb_exec_recursive_paired(_: (@convention(c) (VALUE, VALUE, Int32) -> VALUE)!, _: VALUE, _: VALUE, _: VALUE) -> VALUE
public func rb_exec_recursive_outer(_: (@convention(c) (VALUE, VALUE, Int32) -> VALUE)!, _: VALUE, _: VALUE) -> VALUE
public func rb_exec_recursive_paired_outer(_: (@convention(c) (VALUE, VALUE, Int32) -> VALUE)!, _: VALUE, _: VALUE, _: VALUE) -> VALUE
/* dir.c */
public func rb_dir_getwd() -> VALUE
/* file.c */
public func rb_file_s_expand_path(_: Int32, _: UnsafePointer<VALUE>!) -> VALUE
public func rb_file_expand_path(_: VALUE, _: VALUE) -> VALUE
public func rb_file_s_absolute_path(_: Int32, _: UnsafePointer<VALUE>!) -> VALUE
public func rb_file_absolute_path(_: VALUE, _: VALUE) -> VALUE
public func rb_file_dirname(_ fname: VALUE) -> VALUE
public func rb_find_file_ext_safe(_: UnsafeMutablePointer<VALUE>!, _: UnsafePointer<UnsafePointer<Int8>?>!, _: Int32) -> Int32
public func rb_find_file_safe(_: VALUE, _: Int32) -> VALUE
public func rb_find_file_ext(_: UnsafeMutablePointer<VALUE>!, _: UnsafePointer<UnsafePointer<Int8>?>!) -> Int32
public func rb_find_file(_: VALUE) -> VALUE
public func rb_file_directory_p(_: VALUE, _: VALUE) -> VALUE
public func rb_str_encode_ospath(_: VALUE) -> VALUE
public func rb_is_absolute_path(_: UnsafePointer<Int8>!) -> Int32
/* gc.c */
public func rb_memerror() -> Never

public func rb_during_gc() -> Int32
public func rb_gc_mark_locations(_: UnsafePointer<VALUE>!, _: UnsafePointer<VALUE>!)
public func rb_mark_tbl(_: UnsafeMutablePointer<st_table>!)
public func rb_mark_set(_: UnsafeMutablePointer<st_table>!)
public func rb_mark_hash(_: UnsafeMutablePointer<st_table>!)
public func rb_gc_mark_maybe(_: VALUE)
public func rb_gc_mark(_: VALUE)
public func rb_gc_force_recycle(_: VALUE)
public func rb_gc()
public func rb_gc_copy_finalizer(_: VALUE, _: VALUE)
public func rb_gc_finalize_deferred()
public func rb_gc_call_finalizer_at_exit()
public func rb_gc_enable() -> VALUE
public func rb_gc_disable() -> VALUE
public func rb_gc_start() -> VALUE
public func rb_define_finalizer(_: VALUE, _: VALUE) -> VALUE
public func rb_undefine_finalizer(_: VALUE) -> VALUE
public func rb_gc_count() -> Int
public func rb_gc_stat(_: VALUE) -> Int
public func rb_gc_latest_gc_info(_: VALUE) -> VALUE
/* hash.c */
public func st_foreach_safe(_: UnsafeMutablePointer<st_table>!, _: (@convention(c) () -> Int32)!, _: st_data_t)
public func rb_check_hash_type(_: VALUE) -> VALUE
public func rb_hash_foreach(_: VALUE, _: (@convention(c) () -> Int32)!, _: VALUE)
public func rb_hash(_: VALUE) -> VALUE
public func rb_hash_new() -> VALUE
public func rb_hash_dup(_: VALUE) -> VALUE
public func rb_hash_freeze(_: VALUE) -> VALUE
public func rb_hash_aref(_: VALUE, _: VALUE) -> VALUE
public func rb_hash_lookup(_: VALUE, _: VALUE) -> VALUE
public func rb_hash_lookup2(_: VALUE, _: VALUE, _: VALUE) -> VALUE
public func rb_hash_fetch(_: VALUE, _: VALUE) -> VALUE
public func rb_hash_aset(_: VALUE, _: VALUE, _: VALUE) -> VALUE
public func rb_hash_clear(_: VALUE) -> VALUE
public func rb_hash_delete_if(_: VALUE) -> VALUE
public func rb_hash_delete(_: VALUE, _: VALUE) -> VALUE
public func rb_hash_set_ifnone(_ hash: VALUE, _ ifnone: VALUE) -> VALUE
public typealias rb_hash_update_func = (VALUE, VALUE, VALUE) -> VALUE
public func rb_hash_update_by(_ hash1: VALUE, _ hash2: VALUE, _ func: (@convention(c) (VALUE, VALUE, VALUE) -> VALUE)!) -> VALUE
public func rb_hash_tbl(_: VALUE) -> UnsafeMutablePointer<st_table>!
public func rb_path_check(_: UnsafePointer<Int8>!) -> Int32
public func rb_env_path_tainted() -> Int32
public func rb_env_clear() -> VALUE
public func rb_hash_size(_: VALUE) -> VALUE
@available(*, deprecated)
public func rb_hash_iter_lev(_: VALUE) -> Int32

@available(*, deprecated)
public func rb_hash_ifnone(_: VALUE) -> VALUE

/* io.c */

public var rb_fs: VALUE
public var rb_output_fs: VALUE
public var rb_rs: VALUE
public var rb_default_rs: VALUE
public var rb_output_rs: VALUE
public func rb_io_write(_: VALUE, _: VALUE) -> VALUE
public func rb_io_gets(_: VALUE) -> VALUE
public func rb_io_getbyte(_: VALUE) -> VALUE
public func rb_io_ungetc(_: VALUE, _: VALUE) -> VALUE
public func rb_io_ungetbyte(_: VALUE, _: VALUE) -> VALUE
public func rb_io_close(_: VALUE) -> VALUE
public func rb_io_flush(_: VALUE) -> VALUE
public func rb_io_eof(_: VALUE) -> VALUE
public func rb_io_binmode(_: VALUE) -> VALUE
public func rb_io_ascii8bit_binmode(_: VALUE) -> VALUE
public func rb_io_addstr(_: VALUE, _: VALUE) -> VALUE
public func rb_io_printf(_: Int32, _: UnsafePointer<VALUE>!, _: VALUE) -> VALUE
public func rb_io_print(_: Int32, _: UnsafePointer<VALUE>!, _: VALUE) -> VALUE
public func rb_io_puts(_: Int32, _: UnsafePointer<VALUE>!, _: VALUE) -> VALUE
public func rb_io_fdopen(_: Int32, _: Int32, _: UnsafePointer<Int8>!) -> VALUE
public func rb_io_get_io(_: VALUE) -> VALUE
public func rb_file_open(_: UnsafePointer<Int8>!, _: UnsafePointer<Int8>!) -> VALUE
public func rb_file_open_str(_: VALUE, _: UnsafePointer<Int8>!) -> VALUE
public func rb_gets() -> VALUE
public func rb_write_error(_: UnsafePointer<Int8>!)
public func rb_write_error2(_: UnsafePointer<Int8>!, _: Int)
public func rb_close_before_exec(_ lowfd: Int32, _ maxhint: Int32, _ noclose_fds: VALUE)
public func rb_pipe(_ pipes: UnsafeMutablePointer<Int32>!) -> Int32
public func rb_reserved_fd_p(_ fd: Int32) -> Int32
public func rb_cloexec_open(_ pathname: UnsafePointer<Int8>!, _ flags: Int32, _ mode: mode_t) -> Int32
public func rb_cloexec_dup(_ oldfd: Int32) -> Int32
public func rb_cloexec_dup2(_ oldfd: Int32, _ newfd: Int32) -> Int32
public func rb_cloexec_pipe(_ fildes: UnsafeMutablePointer<Int32>!) -> Int32
public func rb_cloexec_fcntl_dupfd(_ fd: Int32, _ minfd: Int32) -> Int32

public func rb_update_max_fd(_ fd: Int32)
public func rb_fd_fix_cloexec(_ fd: Int32)
/* marshal.c */
public func rb_marshal_dump(_: VALUE, _: VALUE) -> VALUE
public func rb_marshal_load(_: VALUE) -> VALUE
public func rb_marshal_define_compat(_ newclass: VALUE, _ oldclass: VALUE, _ dumper: (@convention(c) (VALUE) -> VALUE)!, _ loader: (@convention(c) (VALUE, VALUE) -> VALUE)!)
/* numeric.c */
public func rb_num_zerodiv() -> Never

public var RB_NUM_COERCE_FUNCS_NEED_OPID: Int32 { get }
public func rb_num_coerce_bin(_: VALUE, _: VALUE, _: ID) -> VALUE
public func rb_num_coerce_cmp(_: VALUE, _: VALUE, _: ID) -> VALUE
public func rb_num_coerce_relop(_: VALUE, _: VALUE, _: ID) -> VALUE
public func rb_num_coerce_bit(_: VALUE, _: VALUE, _: ID) -> VALUE
public func rb_num2fix(_: VALUE) -> VALUE
public func rb_fix2str(_: VALUE, _: Int32) -> VALUE
public func rb_dbl_cmp(_: Double, _: Double) -> VALUE
/* object.c */
public func rb_eql(_: VALUE, _: VALUE) -> Int32
public func rb_any_to_s(_: VALUE) -> VALUE
public func rb_inspect(_: VALUE) -> VALUE
public func rb_obj_is_instance_of(_: VALUE, _: VALUE) -> VALUE
public func rb_obj_is_kind_of(_: VALUE, _: VALUE) -> VALUE
public func rb_obj_alloc(_: VALUE) -> VALUE
public func rb_obj_clone(_: VALUE) -> VALUE
public func rb_obj_dup(_: VALUE) -> VALUE
public func rb_obj_init_copy(_: VALUE, _: VALUE) -> VALUE
public func rb_obj_taint(_: VALUE) -> VALUE
public func rb_obj_tainted(_: VALUE) -> VALUE
public func rb_obj_untaint(_: VALUE) -> VALUE
public func rb_obj_untrust(_: VALUE) -> VALUE
public func rb_obj_untrusted(_: VALUE) -> VALUE
public func rb_obj_trust(_: VALUE) -> VALUE
public func rb_obj_freeze(_: VALUE) -> VALUE
public func rb_obj_frozen_p(_: VALUE) -> VALUE
public func rb_obj_id(_: VALUE) -> VALUE
public func rb_obj_class(_: VALUE) -> VALUE
public func rb_class_real(_: VALUE) -> VALUE
public func rb_class_inherited_p(_: VALUE, _: VALUE) -> VALUE
public func rb_class_superclass(_: VALUE) -> VALUE
public func rb_class_get_superclass(_: VALUE) -> VALUE
public func rb_convert_type(_: VALUE, _: Int32, _: UnsafePointer<Int8>!, _: UnsafePointer<Int8>!) -> VALUE
public func rb_check_convert_type(_: VALUE, _: Int32, _: UnsafePointer<Int8>!, _: UnsafePointer<Int8>!) -> VALUE
public func rb_check_to_integer(_: VALUE, _: UnsafePointer<Int8>!) -> VALUE
public func rb_check_to_float(_: VALUE) -> VALUE
public func rb_to_int(_: VALUE) -> VALUE
public func rb_check_to_int(_: VALUE) -> VALUE
public func rb_Integer(_: VALUE) -> VALUE
public func rb_to_float(_: VALUE) -> VALUE
public func rb_Float(_: VALUE) -> VALUE
public func rb_String(_: VALUE) -> VALUE
public func rb_Array(_: VALUE) -> VALUE
public func rb_Hash(_: VALUE) -> VALUE
public func rb_cstr_to_dbl(_: UnsafePointer<Int8>!, _: Int32) -> Double
public func rb_str_to_dbl(_: VALUE, _: Int32) -> Double
/* parse.y */
public func rb_id_attrset(_: ID) -> ID
public func rb_is_const_id(_: ID) -> Int32
public func rb_is_global_id(_: ID) -> Int32
public func rb_is_instance_id(_: ID) -> Int32
public func rb_is_attrset_id(_: ID) -> Int32
public func rb_is_class_id(_: ID) -> Int32
public func rb_is_local_id(_: ID) -> Int32
public func rb_is_junk_id(_: ID) -> Int32
public func rb_symname_p(_: UnsafePointer<Int8>!) -> Int32
public func rb_sym_interned_p(_: VALUE) -> Int32
public func rb_backref_get() -> VALUE
public func rb_backref_set(_: VALUE)
public func rb_lastline_get() -> VALUE
public func rb_lastline_set(_: VALUE)
/* process.c */
public func rb_last_status_set(_ status: Int32, _ pid: pid_t)
public func rb_last_status_get() -> VALUE
public func rb_proc_exec(_: UnsafePointer<Int8>!) -> Int32
public func rb_f_exec(_: Int32, _: UnsafePointer<VALUE>!) -> VALUE
public func rb_waitpid(_ pid: pid_t, _ status: UnsafeMutablePointer<Int32>!, _ flags: Int32) -> pid_t
public func rb_syswait(_ pid: pid_t)
public func rb_spawn(_: Int32, _: UnsafePointer<VALUE>!) -> pid_t
public func rb_spawn_err(_: Int32, _: UnsafePointer<VALUE>!, _: UnsafeMutablePointer<Int8>!, _: Int) -> pid_t
public func rb_proc_times(_: VALUE) -> VALUE
public func rb_detach_process(_ pid: pid_t) -> VALUE
/* range.c */
public func rb_range_new(_: VALUE, _: VALUE, _: Int32) -> VALUE
public func rb_range_beg_len(_: VALUE, _: UnsafeMutablePointer<Int>!, _: UnsafeMutablePointer<Int>!, _: Int, _: Int32) -> VALUE
public func rb_range_values(_ range: VALUE, _ begp: UnsafeMutablePointer<VALUE>!, _ endp: UnsafeMutablePointer<VALUE>!, _ exclp: UnsafeMutablePointer<Int32>!) -> Int32
/* random.c */
public func rb_genrand_int32() -> UInt32
public func rb_genrand_real() -> Double
public func rb_reset_random_seed()
public func rb_random_bytes(_ rnd: VALUE, _ n: Int) -> VALUE
public func rb_random_int(_ rnd: VALUE, _ max: VALUE) -> VALUE
public func rb_random_int32(_ rnd: VALUE) -> UInt32
public func rb_random_real(_ rnd: VALUE) -> Double
public func rb_random_ulong_limited(_ rnd: VALUE, _ limit: UInt) -> UInt
public func rb_genrand_ulong_limited(_ i: UInt) -> UInt
/* re.c */

public func rb_memcicmp(_: UnsafeRawPointer!, _: UnsafeRawPointer!, _: Int) -> Int32
public func rb_match_busy(_: VALUE)
public func rb_reg_nth_defined(_: Int32, _: VALUE) -> VALUE
public func rb_reg_nth_match(_: Int32, _: VALUE) -> VALUE
public func rb_reg_backref_number(_ match: VALUE, _ backref: VALUE) -> Int32
public func rb_reg_last_match(_: VALUE) -> VALUE
public func rb_reg_match_pre(_: VALUE) -> VALUE
public func rb_reg_match_post(_: VALUE) -> VALUE
public func rb_reg_match_last(_: VALUE) -> VALUE
public var HAVE_RB_REG_NEW_STR: Int32 { get }
public func rb_reg_new_str(_: VALUE, _: Int32) -> VALUE
public func rb_reg_new(_: UnsafePointer<Int8>!, _: Int, _: Int32) -> VALUE
public func rb_reg_alloc() -> VALUE
public func rb_reg_init_str(_ re: VALUE, _ s: VALUE, _ options: Int32) -> VALUE
public func rb_reg_match(_: VALUE, _: VALUE) -> VALUE
public func rb_reg_match2(_: VALUE) -> VALUE
public func rb_reg_options(_: VALUE) -> Int32
/* ruby.c */

public var rb_argv0: VALUE
public func rb_get_argv() -> VALUE
public func rb_load_file(_: UnsafePointer<Int8>!) -> UnsafeMutableRawPointer!
public func rb_load_file_str(_: VALUE) -> UnsafeMutableRawPointer!
/* signal.c */
public func rb_f_kill(_: Int32, _: UnsafePointer<VALUE>!) -> VALUE

public func ruby_posix_signal(_: Int32, _: (@convention(c) (Int32) -> Swift.Void)!) -> (@convention(c) (Int32) -> Swift.Void)!

public func rb_trap_exit()
public func rb_trap_exec()
public func ruby_signal_name(_: Int32) -> UnsafePointer<Int8>!
public func ruby_default_signal(_: Int32)
/* sprintf.c */
public func rb_f_sprintf(_: Int32, _: UnsafePointer<VALUE>!) -> VALUE

public func rb_vsprintf(_: UnsafePointer<Int8>!, _: CVaListPointer) -> VALUE

public func rb_str_vcatf(_: VALUE, _: UnsafePointer<Int8>!, _: CVaListPointer) -> VALUE
public func rb_str_format(_: Int32, _: UnsafePointer<VALUE>!, _: VALUE) -> VALUE
/* string.c */
public func rb_str_new(_: UnsafePointer<Int8>!, _: Int) -> VALUE
public func rb_str_new_cstr(_: UnsafePointer<Int8>!) -> VALUE
public func rb_str_new_shared(_: VALUE) -> VALUE
public func rb_str_new_frozen(_: VALUE) -> VALUE
public func rb_str_new_with_class(_: VALUE, _: UnsafePointer<Int8>!, _: Int) -> VALUE
public func rb_tainted_str_new_cstr(_: UnsafePointer<Int8>!) -> VALUE
public func rb_tainted_str_new(_: UnsafePointer<Int8>!, _: Int) -> VALUE
public func rb_external_str_new(_: UnsafePointer<Int8>!, _: Int) -> VALUE
public func rb_external_str_new_cstr(_: UnsafePointer<Int8>!) -> VALUE
public func rb_locale_str_new(_: UnsafePointer<Int8>!, _: Int) -> VALUE
public func rb_locale_str_new_cstr(_: UnsafePointer<Int8>!) -> VALUE
public func rb_filesystem_str_new(_: UnsafePointer<Int8>!, _: Int) -> VALUE
public func rb_filesystem_str_new_cstr(_: UnsafePointer<Int8>!) -> VALUE
public func rb_str_buf_new(_: Int) -> VALUE
public func rb_str_buf_new_cstr(_: UnsafePointer<Int8>!) -> VALUE
public func rb_str_buf_new2(_: UnsafePointer<Int8>!) -> VALUE
public func rb_str_tmp_new(_: Int) -> VALUE
public func rb_usascii_str_new(_: UnsafePointer<Int8>!, _: Int) -> VALUE
public func rb_usascii_str_new_cstr(_: UnsafePointer<Int8>!) -> VALUE
public func rb_utf8_str_new(_: UnsafePointer<Int8>!, _: Int) -> VALUE
public func rb_utf8_str_new_cstr(_: UnsafePointer<Int8>!) -> VALUE
public func rb_str_new_static(_: UnsafePointer<Int8>!, _: Int) -> VALUE
public func rb_usascii_str_new_static(_: UnsafePointer<Int8>!, _: Int) -> VALUE
public func rb_utf8_str_new_static(_: UnsafePointer<Int8>!, _: Int) -> VALUE
public func rb_str_free(_: VALUE)
public func rb_str_shared_replace(_: VALUE, _: VALUE)
public func rb_str_buf_append(_: VALUE, _: VALUE) -> VALUE
public func rb_str_buf_cat(_: VALUE, _: UnsafePointer<Int8>!, _: Int) -> VALUE
public func rb_str_buf_cat2(_: VALUE, _: UnsafePointer<Int8>!) -> VALUE
public func rb_str_buf_cat_ascii(_: VALUE, _: UnsafePointer<Int8>!) -> VALUE
public func rb_obj_as_string(_: VALUE) -> VALUE
public func rb_check_string_type(_: VALUE) -> VALUE
public func rb_must_asciicompat(_: VALUE)
public func rb_str_dup(_: VALUE) -> VALUE
public func rb_str_resurrect(_ str: VALUE) -> VALUE
public func rb_str_locktmp(_: VALUE) -> VALUE
public func rb_str_unlocktmp(_: VALUE) -> VALUE
public func rb_str_dup_frozen(_: VALUE) -> VALUE

public func rb_str_plus(_: VALUE, _: VALUE) -> VALUE
public func rb_str_times(_: VALUE, _: VALUE) -> VALUE
public func rb_str_sublen(_: VALUE, _: Int) -> Int
public func rb_str_substr(_: VALUE, _: Int, _: Int) -> VALUE
public func rb_str_subseq(_: VALUE, _: Int, _: Int) -> VALUE
public func rb_str_subpos(_: VALUE, _: Int, _: UnsafeMutablePointer<Int>!) -> UnsafeMutablePointer<Int8>!
public func rb_str_modify(_: VALUE)
public func rb_str_modify_expand(_: VALUE, _: Int)
public func rb_str_freeze(_: VALUE) -> VALUE
public func rb_str_set_len(_: VALUE, _: Int)
public func rb_str_resize(_: VALUE, _: Int) -> VALUE
public func rb_str_cat(_: VALUE, _: UnsafePointer<Int8>!, _: Int) -> VALUE
public func rb_str_cat_cstr(_: VALUE, _: UnsafePointer<Int8>!) -> VALUE
public func rb_str_cat2(_: VALUE, _: UnsafePointer<Int8>!) -> VALUE
public func rb_str_append(_: VALUE, _: VALUE) -> VALUE
public func rb_str_concat(_: VALUE, _: VALUE) -> VALUE
public func rb_memhash(_ ptr: UnsafeRawPointer!, _ len: Int) -> st_index_t
public func rb_hash_start(_: st_index_t) -> st_index_t
public func rb_hash_uint32(_: st_index_t, _: UInt32) -> st_index_t
public func rb_hash_uint(_: st_index_t, _: st_index_t) -> st_index_t
public func rb_hash_end(_: st_index_t) -> st_index_t

public func rb_str_hash(_: VALUE) -> st_index_t
public func rb_str_hash_cmp(_: VALUE, _: VALUE) -> Int32
public func rb_str_comparable(_: VALUE, _: VALUE) -> Int32
public func rb_str_cmp(_: VALUE, _: VALUE) -> Int32
public func rb_str_equal(_ str1: VALUE, _ str2: VALUE) -> VALUE
public func rb_str_drop_bytes(_: VALUE, _: Int) -> VALUE
public func rb_str_update(_: VALUE, _: Int, _: Int, _: VALUE)
public func rb_str_replace(_: VALUE, _: VALUE) -> VALUE
public func rb_str_inspect(_: VALUE) -> VALUE
public func rb_str_dump(_: VALUE) -> VALUE
public func rb_str_split(_: VALUE, _: UnsafePointer<Int8>!) -> VALUE
@available(*, deprecated)
public func rb_str_associate(_: VALUE, _: VALUE)

@available(*, deprecated)
public func rb_str_associated(_: VALUE) -> VALUE

public func rb_str_setter(_: VALUE, _: ID, _: UnsafeMutablePointer<VALUE>!)
public func rb_str_intern(_: VALUE) -> VALUE
public func rb_sym_to_s(_: VALUE) -> VALUE
public func rb_str_strlen(_: VALUE) -> Int
public func rb_str_length(_: VALUE) -> VALUE
public func rb_str_offset(_: VALUE, _: Int) -> Int
public func rb_str_capacity(_: VALUE) -> Int
public func rb_str_ellipsize(_: VALUE, _: Int) -> VALUE
public func rb_str_scrub(_: VALUE, _: VALUE) -> VALUE
/* symbol.c */
public func rb_sym_all_symbols() -> VALUE

public func rb_struct_alloc(_: VALUE, _: VALUE) -> VALUE
public func rb_struct_initialize(_: VALUE, _: VALUE) -> VALUE
public func rb_struct_aref(_: VALUE, _: VALUE) -> VALUE
public func rb_struct_aset(_: VALUE, _: VALUE, _: VALUE) -> VALUE
public func rb_struct_getmember(_: VALUE, _: ID) -> VALUE
public func rb_struct_s_members(_: VALUE) -> VALUE
public func rb_struct_members(_: VALUE) -> VALUE
public func rb_struct_alloc_noinit(_: VALUE) -> VALUE

/* thread.c */
public typealias rb_unblock_function_t = (UnsafeMutableRawPointer?) -> Swift.Void
public typealias rb_blocking_function_t = (UnsafeMutableRawPointer?) -> VALUE
public func rb_thread_check_ints()
public func rb_thread_interrupted(_ thval: VALUE) -> Int32

public func rb_mutex_new() -> VALUE
public func rb_mutex_locked_p(_ mutex: VALUE) -> VALUE
public func rb_mutex_trylock(_ mutex: VALUE) -> VALUE
public func rb_mutex_lock(_ mutex: VALUE) -> VALUE
public func rb_mutex_unlock(_ mutex: VALUE) -> VALUE
public func rb_mutex_sleep(_ self: VALUE, _ timeout: VALUE) -> VALUE
public func rb_mutex_synchronize(_ mutex: VALUE, _ func: (@convention(c) (VALUE) -> VALUE)!, _ arg: VALUE) -> VALUE
/* time.c */
public func rb_timespec_now(_: UnsafeMutablePointer<timespec>!)
public func rb_time_new(_: time_t, _: Int) -> VALUE
public func rb_time_nano_new(_: time_t, _: Int) -> VALUE
public func rb_time_timespec_new(_: UnsafePointer<timespec>!, _: Int32) -> VALUE
public func rb_time_num_new(_: VALUE, _: VALUE) -> VALUE
public func rb_time_interval(_ num: VALUE) -> timeval
public func rb_time_timeval(_ time: VALUE) -> timeval
public func rb_time_timespec(_ time: VALUE) -> timespec
/* variable.c */
public func rb_mod_name(_: VALUE) -> VALUE
public func rb_class_path(_: VALUE) -> VALUE
public func rb_class_path_cached(_: VALUE) -> VALUE
public func rb_set_class_path(_: VALUE, _: VALUE, _: UnsafePointer<Int8>!)
public func rb_set_class_path_string(_: VALUE, _: VALUE, _: VALUE)
public func rb_path_to_class(_: VALUE) -> VALUE
public func rb_path2class(_: UnsafePointer<Int8>!) -> VALUE
public func rb_name_class(_: VALUE, _: ID)
public func rb_class_name(_: VALUE) -> VALUE
@available(*, deprecated)
public func rb_autoload(_: VALUE, _: ID, _: UnsafePointer<Int8>!)

public func rb_autoload_load(_: VALUE, _: ID) -> VALUE
public func rb_autoload_p(_: VALUE, _: ID) -> VALUE
public func rb_f_trace_var(_: Int32, _: UnsafePointer<VALUE>!) -> VALUE
public func rb_f_untrace_var(_: Int32, _: UnsafePointer<VALUE>!) -> VALUE
public func rb_f_global_variables() -> VALUE
public func rb_alias_variable(_: ID, _: ID)
@available(*, deprecated)
public func rb_generic_ivar_table(_: VALUE) -> UnsafeMutablePointer<st_table>!

public func rb_copy_generic_ivar(_: VALUE, _: VALUE)
public func rb_free_generic_ivar(_: VALUE)
public func rb_ivar_get(_: VALUE, _: ID) -> VALUE
public func rb_ivar_set(_: VALUE, _: ID, _: VALUE) -> VALUE
public func rb_ivar_defined(_: VALUE, _: ID) -> VALUE
public func rb_ivar_foreach(_: VALUE, _: (@convention(c) () -> Int32)!, _: st_data_t)
public func rb_ivar_count(_: VALUE) -> st_index_t
public func rb_attr_get(_: VALUE, _: ID) -> VALUE
public func rb_obj_instance_variables(_: VALUE) -> VALUE
public func rb_obj_remove_instance_variable(_: VALUE, _: VALUE) -> VALUE
public func rb_mod_const_at(_: VALUE, _: UnsafeMutableRawPointer!) -> UnsafeMutableRawPointer!
public func rb_mod_const_of(_: VALUE, _: UnsafeMutableRawPointer!) -> UnsafeMutableRawPointer!
public func rb_const_list(_: UnsafeMutableRawPointer!) -> VALUE
public func rb_mod_constants(_: Int32, _: UnsafePointer<VALUE>!, _: VALUE) -> VALUE
public func rb_mod_remove_const(_: VALUE, _: VALUE) -> VALUE
public func rb_const_defined(_: VALUE, _: ID) -> Int32
public func rb_const_defined_at(_: VALUE, _: ID) -> Int32
public func rb_const_defined_from(_: VALUE, _: ID) -> Int32
public func rb_const_get(_: VALUE, _: ID) -> VALUE
public func rb_const_get_at(_: VALUE, _: ID) -> VALUE
public func rb_const_get_from(_: VALUE, _: ID) -> VALUE
public func rb_const_set(_: VALUE, _: ID, _: VALUE)
public func rb_const_remove(_: VALUE, _: ID) -> VALUE
public func rb_mod_const_missing(_: VALUE, _: VALUE) -> VALUE
public func rb_cvar_defined(_: VALUE, _: ID) -> VALUE
public func rb_cvar_set(_: VALUE, _: ID, _: VALUE)
public func rb_cvar_get(_: VALUE, _: ID) -> VALUE
public func rb_cv_set(_: VALUE, _: UnsafePointer<Int8>!, _: VALUE)
public func rb_cv_get(_: VALUE, _: UnsafePointer<Int8>!) -> VALUE
public func rb_define_class_variable(_: VALUE, _: UnsafePointer<Int8>!, _: VALUE)
public func rb_mod_class_variables(_: Int32, _: UnsafePointer<VALUE>!, _: VALUE) -> VALUE
public func rb_mod_remove_cvar(_: VALUE, _: VALUE) -> VALUE

public func rb_frame_callee() -> ID
public func rb_str_succ(_: VALUE) -> VALUE
public func rb_time_succ(_: VALUE) -> VALUE
public func rb_frame_method_id_and_class(_ idp: UnsafeMutablePointer<ID>!, _ klassp: UnsafeMutablePointer<VALUE>!) -> Int32
public func rb_make_backtrace() -> VALUE
public func rb_make_exception(_: Int32, _: UnsafePointer<VALUE>!) -> VALUE

/* deprecated */
@available(*, deprecated)
public func rb_frame_pop()

public func rb_clone_setup(_ clone: VALUE, _ obj: VALUE)

public func rb_dup_setup(_ dup: VALUE, _ obj: VALUE)

public func rb_array_len(_ a: VALUE) -> Int

/* workaround for old version of Fujitsu C Compiler (fcc) */

public func rb_array_const_ptr(_ a: VALUE) -> UnsafePointer<VALUE>!

public func rb_struct_len(_ st: VALUE) -> Int

public func rb_struct_const_ptr(_ st: VALUE) -> UnsafePointer<VALUE>!

/* hook for external modules */

public var RUBY_VM: Int32 { get } /* YARV */

public func ruby_native_thread_p() -> Int32

/* traditional set_trace_func events */
public var RUBY_EVENT_NONE: Int32 { get }
public var RUBY_EVENT_LINE: Int32 { get }
public var RUBY_EVENT_CLASS: Int32 { get }
public var RUBY_EVENT_END: Int32 { get }
public var RUBY_EVENT_CALL: Int32 { get }
public var RUBY_EVENT_RETURN: Int32 { get }
public var RUBY_EVENT_C_CALL: Int32 { get }
public var RUBY_EVENT_C_RETURN: Int32 { get }
public var RUBY_EVENT_RAISE: Int32 { get }
public var RUBY_EVENT_ALL: Int32 { get }

/* for TracePoint extended events */
public var RUBY_EVENT_B_CALL: Int32 { get }
public var RUBY_EVENT_B_RETURN: Int32 { get }
public var RUBY_EVENT_THREAD_BEGIN: Int32 { get }
public var RUBY_EVENT_THREAD_END: Int32 { get }
public var RUBY_EVENT_FIBER_SWITCH: Int32 { get }
public var RUBY_EVENT_TRACEPOINT_ALL: Int32 { get }

/* special events */
public var RUBY_EVENT_SPECIFIED_LINE: Int32 { get }
public var RUBY_EVENT_COVERAGE: Int32 { get }

/* internal events */
public var RUBY_INTERNAL_EVENT_SWITCH: Int32 { get }
public var RUBY_EVENT_SWITCH: Int32 { get } /* obsolete name. this macro is for compatibility */
/* 0x080000 */
public var RUBY_INTERNAL_EVENT_NEWOBJ: Int32 { get }
public var RUBY_INTERNAL_EVENT_FREEOBJ: Int32 { get }
public var RUBY_INTERNAL_EVENT_GC_START: Int32 { get }
public var RUBY_INTERNAL_EVENT_GC_END_MARK: Int32 { get }
public var RUBY_INTERNAL_EVENT_GC_END_SWEEP: Int32 { get }
public var RUBY_INTERNAL_EVENT_GC_ENTER: Int32 { get }
public var RUBY_INTERNAL_EVENT_GC_EXIT: Int32 { get }
public var RUBY_INTERNAL_EVENT_OBJSPACE_MASK: Int32 { get }
public var RUBY_INTERNAL_EVENT_MASK: UInt32 { get }

public typealias rb_event_flag_t = UInt32
public typealias rb_event_hook_func_t = @convention(c) (rb_event_flag_t, VALUE, VALUE, ID, VALUE) -> Swift.Void

public var RB_EVENT_HOOKS_HAVE_CALLBACK_DATA: Int32 { get }
public func rb_add_event_hook(_ func: CRuby.rb_event_hook_func_t!, _ events: rb_event_flag_t, _ data: VALUE)
public func rb_remove_event_hook(_ func: CRuby.rb_event_hook_func_t!) -> Int32

/* locale insensitive functions */

public func rb_isalnum(_ c: Int32) -> Int32
public func rb_isalpha(_ c: Int32) -> Int32
public func rb_isblank(_ c: Int32) -> Int32
public func rb_iscntrl(_ c: Int32) -> Int32
public func rb_isdigit(_ c: Int32) -> Int32
public func rb_isgraph(_ c: Int32) -> Int32
public func rb_islower(_ c: Int32) -> Int32
public func rb_isprint(_ c: Int32) -> Int32
public func rb_ispunct(_ c: Int32) -> Int32
public func rb_isspace(_ c: Int32) -> Int32
public func rb_isupper(_ c: Int32) -> Int32
public func rb_isxdigit(_ c: Int32) -> Int32
public func rb_tolower(_ c: Int32) -> Int32
public func rb_toupper(_ c: Int32) -> Int32

public func st_locale_insensitive_strcasecmp(_ s1: UnsafePointer<Int8>!, _ s2: UnsafePointer<Int8>!) -> Int32
public func st_locale_insensitive_strncasecmp(_ s1: UnsafePointer<Int8>!, _ s2: UnsafePointer<Int8>!, _ n: Int) -> Int32

public func ruby_strtoul(_ str: UnsafePointer<Int8>!, _ endptr: UnsafeMutablePointer<UnsafeMutablePointer<Int8>?>!, _ base: Int32) -> UInt

public func ruby_vsnprintf(_ str: UnsafeMutablePointer<Int8>!, _ n: Int, _ fmt: UnsafePointer<Int8>!, _ ap: CVaListPointer) -> Int32

/**
 * @defgroup embed CRuby Embedding APIs
 * CRuby interpreter APIs. These are APIs to embed MRI interpreter into your
 * program.
 * These functions are not a part of Ruby extension library API.
 * Extension libraries of Ruby should not depend on these functions.
 * @{
 */


/** @defgroup ruby1 ruby(1) implementation
 * A part of the implementation of ruby(1) command.
 * Other programs that embed Ruby interpreter do not always need to use these
 * functions.
 * @{
 */
public func ruby_sysinit(_ argc: UnsafeMutablePointer<Int32>!, _ argv: UnsafeMutablePointer<UnsafeMutablePointer<UnsafeMutablePointer<Int8>?>?>!)
public func ruby_init()
public func ruby_options(_ argc: Int32, _ argv: UnsafeMutablePointer<UnsafeMutablePointer<Int8>?>!) -> UnsafeMutableRawPointer!
public func ruby_executable_node(_ n: UnsafeMutableRawPointer!, _ status: UnsafeMutablePointer<Int32>!) -> Int32
public func ruby_run_node(_ n: UnsafeMutableRawPointer!) -> Int32

/* version.c */
public func ruby_show_version()
public func ruby_show_copyright()

/*! A convenience macro to call ruby_init_stack(). Must be placed just after
 *  variable declarations */

/*! @} */

public func ruby_init_stack(_: UnsafeMutablePointer<VALUE>!)

public func ruby_setup() -> Int32
public func ruby_cleanup(_: Int32) -> Int32

public func ruby_finalize()
public func ruby_stop(_: Int32) -> Never

public func ruby_set_stack_size(_: Int)
public func ruby_stack_check() -> Int32
public func ruby_stack_length(_: UnsafeMutablePointer<UnsafeMutablePointer<VALUE>?>!) -> Int

public func ruby_exec_node(_ n: UnsafeMutableRawPointer!) -> Int32

public func ruby_script(_ name: UnsafePointer<Int8>!)
public func ruby_set_script_name(_ name: VALUE)

public func ruby_prog_init()
public func ruby_set_argv(_: Int32, _: UnsafeMutablePointer<UnsafeMutablePointer<Int8>?>!)
public func ruby_process_options(_: Int32, _: UnsafeMutablePointer<UnsafeMutablePointer<Int8>?>!) -> UnsafeMutableRawPointer!
public func ruby_init_loadpath()
public func ruby_incpush(_: UnsafePointer<Int8>!)
public func ruby_sig_finalize()

